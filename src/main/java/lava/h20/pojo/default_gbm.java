package lava.h20.pojo;


/*
����  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2018-03-07T17:55:42.263+08:00
  3.16.0.2
  
  Standalone prediction code with sample test data for GBMModel named default_gbm

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://172.16.100.187:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://172.16.100.187:54321/3/Models.java/default_gbm > default_gbm.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m default_gbm.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="default_gbm", algorithm="gbm")
public class default_gbm extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Binomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 12; }
  public int nclasses() { return 2; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_default_gbm.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* pclass */ null,
    /* sex */ default_gbm_ColInfo_1.VALUES,
    /* age */ null,
    /* sibsp */ null,
    /* parch */ null,
    /* ticket */ null,
    /* fare */ null,
    /* cabin */ default_gbm_ColInfo_7.VALUES,
    /* embarked */ default_gbm_ColInfo_8.VALUES,
    /* boat */ null,
    /* body */ null,
    /* home.dest */ default_gbm_ColInfo_11.VALUES,
    /* survived */ default_gbm_ColInfo_12.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.6141025641025641,0.3858974358974359};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.6141025641025641,0.3858974358974359};

  public default_gbm() { super(NAMES,DOMAINS,"survived"); }
  public String getUUID() { return Long.toString(1052915313008972472L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    default_gbm_Forest_0.score0(data,preds);
    default_gbm_Forest_1.score0(data,preds);
    default_gbm_Forest_2.score0(data,preds);
    default_gbm_Forest_3.score0(data,preds);
    default_gbm_Forest_4.score0(data,preds);
    default_gbm_Forest_5.score0(data,preds);
    default_gbm_Forest_6.score0(data,preds);
    default_gbm_Forest_7.score0(data,preds);
    default_gbm_Forest_8.score0(data,preds);
    default_gbm_Forest_9.score0(data,preds);
    default_gbm_Forest_10.score0(data,preds);
    default_gbm_Forest_11.score0(data,preds);
    default_gbm_Forest_12.score0(data,preds);
    default_gbm_Forest_13.score0(data,preds);
    default_gbm_Forest_14.score0(data,preds);
    default_gbm_Forest_15.score0(data,preds);
    default_gbm_Forest_16.score0(data,preds);
    default_gbm_Forest_17.score0(data,preds);
    default_gbm_Forest_18.score0(data,preds);
    default_gbm_Forest_19.score0(data,preds);
    default_gbm_Forest_20.score0(data,preds);
    default_gbm_Forest_21.score0(data,preds);
    default_gbm_Forest_22.score0(data,preds);
    default_gbm_Forest_23.score0(data,preds);
    default_gbm_Forest_24.score0(data,preds);
    default_gbm_Forest_25.score0(data,preds);
    default_gbm_Forest_26.score0(data,preds);
    default_gbm_Forest_27.score0(data,preds);
    default_gbm_Forest_28.score0(data,preds);
    default_gbm_Forest_29.score0(data,preds);
    default_gbm_Forest_30.score0(data,preds);
    default_gbm_Forest_31.score0(data,preds);
    default_gbm_Forest_32.score0(data,preds);
    default_gbm_Forest_33.score0(data,preds);
    default_gbm_Forest_34.score0(data,preds);
    default_gbm_Forest_35.score0(data,preds);
    default_gbm_Forest_36.score0(data,preds);
    default_gbm_Forest_37.score0(data,preds);
    default_gbm_Forest_38.score0(data,preds);
    default_gbm_Forest_39.score0(data,preds);
    default_gbm_Forest_40.score0(data,preds);
    default_gbm_Forest_41.score0(data,preds);
    default_gbm_Forest_42.score0(data,preds);
    default_gbm_Forest_43.score0(data,preds);
    default_gbm_Forest_44.score0(data,preds);
    default_gbm_Forest_45.score0(data,preds);
    default_gbm_Forest_46.score0(data,preds);
    default_gbm_Forest_47.score0(data,preds);
    default_gbm_Forest_48.score0(data,preds);
    default_gbm_Forest_49.score0(data,preds);
    preds[2] = preds[1] + -0.46459033266203953;
    preds[2] = 1./(1. + Math.min(1e19, Math.exp(-(preds[2]))));
    preds[1] = 1.0-preds[2];
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.7473333465422901);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_default_gbm implements java.io.Serializable {
  public static final String[] VALUES = new String[12];
  static {
    NamesHolder_default_gbm_0.fill(VALUES);
  }
  static final class NamesHolder_default_gbm_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "pclass";
      sa[1] = "sex";
      sa[2] = "age";
      sa[3] = "sibsp";
      sa[4] = "parch";
      sa[5] = "ticket";
      sa[6] = "fare";
      sa[7] = "cabin";
      sa[8] = "embarked";
      sa[9] = "boat";
      sa[10] = "body";
      sa[11] = "home.dest";
    }
  }
}
// The class representing column sex
class default_gbm_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    default_gbm_ColInfo_1_0.fill(VALUES);
  }
  static final class default_gbm_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "female";
      sa[1] = "male";
    }
  }
}
// The class representing column cabin
class default_gbm_ColInfo_7 implements java.io.Serializable {
  public static final String[] VALUES = new String[186];
  static {
    default_gbm_ColInfo_7_0.fill(VALUES);
  }
  static final class default_gbm_ColInfo_7_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "A10";
      sa[1] = "A11";
      sa[2] = "A14";
      sa[3] = "A16";
      sa[4] = "A18";
      sa[5] = "A19";
      sa[6] = "A20";
      sa[7] = "A21";
      sa[8] = "A23";
      sa[9] = "A24";
      sa[10] = "A26";
      sa[11] = "A29";
      sa[12] = "A31";
      sa[13] = "A32";
      sa[14] = "A34";
      sa[15] = "A36";
      sa[16] = "A5";
      sa[17] = "A6";
      sa[18] = "A7";
      sa[19] = "A9";
      sa[20] = "B10";
      sa[21] = "B101";
      sa[22] = "B102";
      sa[23] = "B11";
      sa[24] = "B18";
      sa[25] = "B19";
      sa[26] = "B20";
      sa[27] = "B22";
      sa[28] = "B24";
      sa[29] = "B26";
      sa[30] = "B28";
      sa[31] = "B3";
      sa[32] = "B30";
      sa[33] = "B35";
      sa[34] = "B36";
      sa[35] = "B37";
      sa[36] = "B38";
      sa[37] = "B39";
      sa[38] = "B4";
      sa[39] = "B41";
      sa[40] = "B42";
      sa[41] = "B45";
      sa[42] = "B49";
      sa[43] = "B5";
      sa[44] = "B50";
      sa[45] = "B51 B53 B55";
      sa[46] = "B52 B54 B56";
      sa[47] = "B57 B59 B63 B66";
      sa[48] = "B58 B60";
      sa[49] = "B61";
      sa[50] = "B69";
      sa[51] = "B71";
      sa[52] = "B73";
      sa[53] = "B77";
      sa[54] = "B78";
      sa[55] = "B79";
      sa[56] = "B80";
      sa[57] = "B82 B84";
      sa[58] = "B86";
      sa[59] = "B94";
      sa[60] = "B96 B98";
      sa[61] = "C101";
      sa[62] = "C103";
      sa[63] = "C104";
      sa[64] = "C105";
      sa[65] = "C106";
      sa[66] = "C110";
      sa[67] = "C111";
      sa[68] = "C116";
      sa[69] = "C118";
      sa[70] = "C123";
      sa[71] = "C124";
      sa[72] = "C125";
      sa[73] = "C126";
      sa[74] = "C128";
      sa[75] = "C130";
      sa[76] = "C132";
      sa[77] = "C148";
      sa[78] = "C2";
      sa[79] = "C22 C26";
      sa[80] = "C23 C25 C27";
      sa[81] = "C28";
      sa[82] = "C30";
      sa[83] = "C31";
      sa[84] = "C32";
      sa[85] = "C39";
      sa[86] = "C45";
      sa[87] = "C46";
      sa[88] = "C47";
      sa[89] = "C49";
      sa[90] = "C50";
      sa[91] = "C51";
      sa[92] = "C52";
      sa[93] = "C53";
      sa[94] = "C54";
      sa[95] = "C55 C57";
      sa[96] = "C6";
      sa[97] = "C62 C64";
      sa[98] = "C65";
      sa[99] = "C68";
      sa[100] = "C7";
      sa[101] = "C70";
      sa[102] = "C78";
      sa[103] = "C80";
      sa[104] = "C82";
      sa[105] = "C83";
      sa[106] = "C85";
      sa[107] = "C86";
      sa[108] = "C87";
      sa[109] = "C89";
      sa[110] = "C90";
      sa[111] = "C91";
      sa[112] = "C92";
      sa[113] = "C93";
      sa[114] = "C95";
      sa[115] = "C97";
      sa[116] = "C99";
      sa[117] = "D";
      sa[118] = "D10 D12";
      sa[119] = "D11";
      sa[120] = "D15";
      sa[121] = "D17";
      sa[122] = "D19";
      sa[123] = "D20";
      sa[124] = "D21";
      sa[125] = "D22";
      sa[126] = "D26";
      sa[127] = "D28";
      sa[128] = "D30";
      sa[129] = "D33";
      sa[130] = "D34";
      sa[131] = "D35";
      sa[132] = "D36";
      sa[133] = "D37";
      sa[134] = "D38";
      sa[135] = "D40";
      sa[136] = "D43";
      sa[137] = "D45";
      sa[138] = "D46";
      sa[139] = "D47";
      sa[140] = "D48";
      sa[141] = "D49";
      sa[142] = "D50";
      sa[143] = "D56";
      sa[144] = "D6";
      sa[145] = "D7";
      sa[146] = "D9";
      sa[147] = "E10";
      sa[148] = "E101";
      sa[149] = "E12";
      sa[150] = "E121";
      sa[151] = "E17";
      sa[152] = "E24";
      sa[153] = "E25";
      sa[154] = "E31";
      sa[155] = "E33";
      sa[156] = "E34";
      sa[157] = "E36";
      sa[158] = "E38";
      sa[159] = "E39 E41";
      sa[160] = "E40";
      sa[161] = "E44";
      sa[162] = "E45";
      sa[163] = "E46";
      sa[164] = "E49";
      sa[165] = "E50";
      sa[166] = "E52";
      sa[167] = "E58";
      sa[168] = "E60";
      sa[169] = "E63";
      sa[170] = "E67";
      sa[171] = "E68";
      sa[172] = "E77";
      sa[173] = "E8";
      sa[174] = "F";
      sa[175] = "F E46";
      sa[176] = "F E57";
      sa[177] = "F E69";
      sa[178] = "F G63";
      sa[179] = "F G73";
      sa[180] = "F2";
      sa[181] = "F33";
      sa[182] = "F38";
      sa[183] = "F4";
      sa[184] = "G6";
      sa[185] = "T";
    }
  }
}
// The class representing column embarked
class default_gbm_ColInfo_8 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    default_gbm_ColInfo_8_0.fill(VALUES);
  }
  static final class default_gbm_ColInfo_8_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "C";
      sa[1] = "Q";
      sa[2] = "S";
    }
  }
}
// The class representing column home.dest
class default_gbm_ColInfo_11 implements java.io.Serializable {
  public static final String[] VALUES = new String[369];
  static {
    default_gbm_ColInfo_11_0.fill(VALUES);
  }
  static final class default_gbm_ColInfo_11_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "?Havana  Cuba";
      sa[1] = "Aberdeen / Portland  OR";
      sa[2] = "Albany  NY";
      sa[3] = "Altdorf  Switzerland";
      sa[4] = "Amenia  ND";
      sa[5] = "Antwerp  Belgium / Stanton  OH";
      sa[6] = "Argentina";
      sa[7] = "Asarum  Sweden Brooklyn  NY";
      sa[8] = "Ascot  Berkshire / Rochester  NY";
      sa[9] = "Auburn  NY";
      sa[10] = "Aughnacliff  Co Longford  Ireland New York  NY";
      sa[11] = "Australia Fingal  ND";
      sa[12] = "Austria";
      sa[13] = "Austria Niagara Falls  NY";
      sa[14] = "Austria-Hungary";
      sa[15] = "Austria-Hungary / Germantown  Philadelphia  PA";
      sa[16] = "Bangkok  Thailand / Roseville  IL";
      sa[17] = "Barcelona  Spain / Havana  Cuba";
      sa[18] = "Barre  Co Washington  VT";
      sa[19] = "Basel  Switzerland";
      sa[20] = "Bath  England / Massachusetts";
      sa[21] = "Bayside  Queens  NY";
      sa[22] = "Belfast";
      sa[23] = "Belfast  NI";
      sa[24] = "Belgium  Montreal  PQ";
      sa[25] = "Belgium Detroit  MI";
      sa[26] = "Belmont  MA";
      sa[27] = "Bennington  VT";
      sa[28] = "Bergen  Norway";
      sa[29] = "Berne  Switzerland / Central City  IA";
      sa[30] = "Birkdale  England Cleveland  Ohio";
      sa[31] = "Bishopstoke  Hants / Fayette Valley  ID";
      sa[32] = "Boston  MA";
      sa[33] = "Bournemouth  England";
      sa[34] = "Bournemouth  England Newark  NJ";
      sa[35] = "Bournmouth  England";
      sa[36] = "Brennes  Norway New York";
      sa[37] = "Bridgerule  Devon";
      sa[38] = "Bridgwater  Somerset  England";
      sa[39] = "Brighton  MA";
      sa[40] = "Brighton  Sussex";
      sa[41] = "Bristol  Avon / Jacksonville  FL";
      sa[42] = "Bristol  England / New Britain  CT";
      sa[43] = "Bristol  England Cleveland  OH";
      sa[44] = "Brockton  MA";
      sa[45] = "Bromsgrove  England / Montreal  PQ";
      sa[46] = "Bronx  NY";
      sa[47] = "Brookline  MA";
      sa[48] = "Brooklyn  NY";
      sa[49] = "Broomfield  Chelmsford  England";
      sa[50] = "Brunswick  ME";
      sa[51] = "Bryn Mawr  PA";
      sa[52] = "Bryn Mawr  PA  USA";
      sa[53] = "Buenos Aires  Argentina / New Jersey  NJ";
      sa[54] = "Buffalo  NY";
      sa[55] = "Bulgaria Chicago  IL";
      sa[56] = "Bulgaria Coon Rapids  IA";
      sa[57] = "Calgary  AB";
      sa[58] = "Cambridge  MA";
      sa[59] = "Cape Town  South Africa / Seattle  WA";
      sa[60] = "Catford  Kent / Detroit  MI";
      sa[61] = "Chelsea  London";
      sa[62] = "Chicago  IL";
      sa[63] = "Cincinatti  OH";
      sa[64] = "Clevedon  England";
      sa[65] = "Co Athlone  Ireland New York  NY";
      sa[66] = "Co Clare  Ireland Washington  DC";
      sa[67] = "Co Cork  Ireland Charlestown  MA";
      sa[68] = "Co Cork  Ireland Roxbury  MA";
      sa[69] = "Co Limerick  Ireland Sherbrooke  PQ";
      sa[70] = "Co Longford  Ireland New York  NY";
      sa[71] = "Co Sligo  Ireland Hartford  CT";
      sa[72] = "Co Sligo  Ireland New York  NY";
      sa[73] = "Cologne  Germany";
      sa[74] = "Columbus  OH";
      sa[75] = "Cooperstown  NY";
      sa[76] = "Copenhagen  Denmark";
      sa[77] = "Cornwall";
      sa[78] = "Cornwall  England Houghton  MI";
      sa[79] = "Cornwall / Akron  OH";
      sa[80] = "Cornwall / Camden  NJ";
      sa[81] = "Cornwall / Clear Creek  CO";
      sa[82] = "Cornwall / Hancock  MI";
      sa[83] = "Cornwall / Houghton  MI";
      sa[84] = "Cornwall / Spokane  WA";
      sa[85] = "Croatia";
      sa[86] = "Dagsas  Sweden Fower  MN";
      sa[87] = "Deephaven  MN / Cedar Rapids  IA";
      sa[88] = "Deer Lodge  MT";
      sa[89] = "Denmark / New York  NY";
      sa[90] = "Denmark Hill  Surrey / Chicago";
      sa[91] = "Denver  CO";
      sa[92] = "Detroit  MI";
      sa[93] = "Devon  England Wichita  KS";
      sa[94] = "Devonport  England";
      sa[95] = "Dorchester  MA";
      sa[96] = "Dorking  Surrey  England";
      sa[97] = "Dowagiac  MI";
      sa[98] = "Duluth  MN";
      sa[99] = "East Bridgewater  MA";
      sa[100] = "East Orange  NJ";
      sa[101] = "East Providence  RI";
      sa[102] = "Effington Rut  SD";
      sa[103] = "Elizabeth  NJ";
      sa[104] = "Elkins Park  PA";
      sa[105] = "Elmira  NY / Orange  NJ";
      sa[106] = "England";
      sa[107] = "England / Bennington  VT";
      sa[108] = "England / Detroit  MI";
      sa[109] = "England / Hartford  CT";
      sa[110] = "England / Philadelphia  PA";
      sa[111] = "England / Sacramento  CA";
      sa[112] = "England / San Francisco  CA";
      sa[113] = "England Albion  NY";
      sa[114] = "England Brooklyn  NY";
      sa[115] = "England New York  NY";
      sa[116] = "England Oglesby  IL";
      sa[117] = "England Salt Lake City  Utah";
      sa[118] = "Finland / Minneapolis  MN";
      sa[119] = "Finland / Washington  DC";
      sa[120] = "Finland Sudbury  ON";
      sa[121] = "Folkstone  Kent / New York  NY";
      sa[122] = "Fond du Lac  WI";
      sa[123] = "Foresvik  Norway Portland  ND";
      sa[124] = "Frankfort  KY";
      sa[125] = "Gallipolis  Ohio / ? Paris / New York";
      sa[126] = "Geneva  Switzerland / Radnor  PA";
      sa[127] = "Germantown  Philadelphia  PA";
      sa[128] = "Glasgow";
      sa[129] = "Glasgow / Bangor  ME";
      sa[130] = "Glen Ridge  NJ";
      sa[131] = "Goteborg  Sweden / Rockford  IL";
      sa[132] = "Goteborg  Sweden Huntley  IL";
      sa[133] = "Greece";
      sa[134] = "Green Bay  WI";
      sa[135] = "Greenport  NY";
      sa[136] = "Greensburg  PA";
      sa[137] = "Greenwich  CT";
      sa[138] = "Guernsey";
      sa[139] = "Guernsey  England / Edgewood  RI";
      sa[140] = "Guernsey / Elizabeth  NJ";
      sa[141] = "Guernsey / Montclair  NJ and/or Toledo  Ohio";
      sa[142] = "Guernsey / Wilmington  DE";
      sa[143] = "Gunnislake  England / Butte  MT";
      sa[144] = "Guntur  India / Benton Harbour  MI";
      sa[145] = "Haddenfield  NJ";
      sa[146] = "Halesworth  England";
      sa[147] = "Halifax  NS";
      sa[148] = "Hamilton  ON";
      sa[149] = "Harrisburg  PA";
      sa[150] = "Harrow  England";
      sa[151] = "Harrow-on-the-Hill  Middlesex";
      sa[152] = "Hartford  CT";
      sa[153] = "Hartford  Huntingdonshire";
      sa[154] = "Haverford  PA";
      sa[155] = "Haverford  PA / Cooperstown  NY";
      sa[156] = "Helsinki  Finland Ashtabula  Ohio";
      sa[157] = "Hessle  Yorks";
      sa[158] = "Holley  NY";
      sa[159] = "Hong Kong New York  NY";
      sa[160] = "Hornsey  England";
      sa[161] = "Hudson  NY";
      sa[162] = "Huntington  WV";
      sa[163] = "Ilford  Essex / Winnipeg  MB";
      sa[164] = "Ilfracombe  Devon";
      sa[165] = "Illinois  USA";
      sa[166] = "India / Pittsburgh  PA";
      sa[167] = "India / Rapid City  SD";
      sa[168] = "Indianapolis  IN";
      sa[169] = "Ireland";
      sa[170] = "Ireland Brooklyn  NY";
      sa[171] = "Ireland Chicago  IL";
      sa[172] = "Ireland New York  NY";
      sa[173] = "Ireland Philadelphia  PA";
      sa[174] = "Isle of Wight  England";
      sa[175] = "Isleworth  England";
      sa[176] = "Italy Philadelphia  PA";
      sa[177] = "Jacksonville  FL";
      sa[178] = "Janjgir  India / Pennsylvania";
      sa[179] = "Karberg  Sweden Jerome Junction  AZ";
      sa[180] = "Kilmacowen  Co Sligo  Ireland New York  NY";
      sa[181] = "Kingston  Surrey";
      sa[182] = "Kingwilliamstown  Co Cork  Ireland Glens Falls  NY";
      sa[183] = "Kingwilliamstown  Co Cork  Ireland New York  NY";
      sa[184] = "Kontiolahti  Finland / Detroit  MI";
      sa[185] = "Krakoryd  Sweden Bloomington  IL";
      sa[186] = "Krakudden  Sweden Moune  IL";
      sa[187] = "Lake Arthur  Chavez County  NM";
      sa[188] = "Lakewood  NJ";
      sa[189] = "Lexington  MA";
      sa[190] = "Lima  Peru";
      sa[191] = "Little Onn Hall  Staffs";
      sa[192] = "Liverpool";
      sa[193] = "Liverpool  England / Belfast";
      sa[194] = "Liverpool  England Bedford  OH";
      sa[195] = "Liverpool / Montreal  PQ";
      sa[196] = "London";
      sa[197] = "London  England";
      sa[198] = "London  England / Marietta  Ohio and Milwaukee  WI";
      sa[199] = "London  England Norfolk  VA";
      sa[200] = "London  Vancouver  BC";
      sa[201] = "London /  East Orange  NJ";
      sa[202] = "London / Birmingham";
      sa[203] = "London / Chicago  IL";
      sa[204] = "London / Fort Byron  NY";
      sa[205] = "London / Middlesex";
      sa[206] = "London / Montreal  PQ";
      sa[207] = "London / New York  NY";
      sa[208] = "London / Paris";
      sa[209] = "London / Staten Island  NY";
      sa[210] = "London / Winnipeg  MB";
      sa[211] = "London Brooklyn  NY";
      sa[212] = "London New York  NY";
      sa[213] = "London Skanteales  NY";
      sa[214] = "Los Angeles  CA";
      sa[215] = "Lower Clapton  Middlesex or Erdington  Birmingham";
      sa[216] = "Lucca  Italy / California";
      sa[217] = "Lyndhurst  England";
      sa[218] = "Madrid  Spain";
      sa[219] = "Mamaroneck  NY";
      sa[220] = "Manchester  England";
      sa[221] = "Medeltorp  Sweden Chicago  IL";
      sa[222] = "Merrill  WI";
      sa[223] = "Mexico City  Mexico";
      sa[224] = "Middleburg Heights  OH";
      sa[225] = "Milford  NH";
      sa[226] = "Milwaukee  WI";
      sa[227] = "Minneapolis  MN";
      sa[228] = "Montevideo  Uruguay";
      sa[229] = "Montreal  PQ";
      sa[230] = "Montreal  PQ / Chesterville  ON";
      sa[231] = "Moscow / Bronx  NY";
      sa[232] = "Mt Airy  Philadelphia  PA";
      sa[233] = "Myren  Sweden New York  NY";
      sa[234] = "New Britain  CT";
      sa[235] = "New Forest  England";
      sa[236] = "New York  NY";
      sa[237] = "New York  NY /  Stamford CT";
      sa[238] = "New York  NY / Briarcliff Manor NY";
      sa[239] = "New York  NY / Greenwich CT";
      sa[240] = "New York  NY / Ithaca  NY";
      sa[241] = "New York  NY / Washington  DC";
      sa[242] = "Newark  NJ";
      sa[243] = "Nice  France";
      sa[244] = "Norrlot  Sweden Chicago  IL";
      sa[245] = "North Evington  England";
      sa[246] = "Norway Los Angeles  CA";
      sa[247] = "Norwich / New York  NY";
      sa[248] = "Omaha  NE";
      sa[249] = "Oskarshamn  Sweden Minneapolis  MN";
      sa[250] = "Oslo  Norway Bayonne  NJ";
      sa[251] = "Oslo  Norway Cameron  WI";
      sa[252] = "Ottawa  ON";
      sa[253] = "Paris";
      sa[254] = "Paris  France";
      sa[255] = "Paris  France / New York  NY";
      sa[256] = "Paris  France New York  NY";
      sa[257] = "Paris /  New York  NY";
      sa[258] = "Paris / Haiti";
      sa[259] = "Paris / Montreal  PQ";
      sa[260] = "Pennsylvania";
      sa[261] = "Penzance  Cornwall / Akron  OH";
      sa[262] = "Perkins County  SD";
      sa[263] = "Philadelphia  PA";
      sa[264] = "Plymouth  Devon / Detroit  MI";
      sa[265] = "Plymouth  Dorset / Houghton  MI";
      sa[266] = "Plymouth  England";
      sa[267] = "Pomeroy  WA";
      sa[268] = "Pondersend  England / New Durham  NJ";
      sa[269] = "Portland  OR";
      sa[270] = "Portugal";
      sa[271] = "Portugal / Sau Paulo  Brazil";
      sa[272] = "Providence  RI";
      sa[273] = "Provo  UT";
      sa[274] = "Roachdale  IN";
      sa[275] = "Rochester  NY";
      sa[276] = "Rotherfield  Sussex  England Essex Co  MA";
      sa[277] = "Rotterdam  Netherlands";
      sa[278] = "Ruotsinphyhtaa  Finland New York  NY";
      sa[279] = "Ruotsinphytaa  Finland New York  NY";
      sa[280] = "Russia";
      sa[281] = "Russia New York  NY";
      sa[282] = "Salo  Finland Astoria  OR";
      sa[283] = "San Francisco  CA";
      sa[284] = "Sarnia  ON";
      sa[285] = "Sault St Marie  ON";
      sa[286] = "Scituate  MA";
      sa[287] = "Seattle  WA";
      sa[288] = "Seattle  WA / Toledo  OH";
      sa[289] = "Sittingbourne  England / San Diego  CA";
      sa[290] = "Skara  Sweden / Rockford  IL";
      sa[291] = "Somerset / Bernardsville  NJ";
      sa[292] = "Southampton";
      sa[293] = "Southampton / New York  NY";
      sa[294] = "Southington / Noank  CT";
      sa[295] = "Southsea  Hants";
      sa[296] = "Spain";
      sa[297] = "Spain / Havana  Cuba";
      sa[298] = "Springfield  MA";
      sa[299] = "St Andrews  Guernsey";
      sa[300] = "St Anne's-on-Sea  Lancashire";
      sa[301] = "St Austall  Cornwall";
      sa[302] = "St Denys  Southampton  Hants";
      sa[303] = "St Ives  Cornwall / Calumet  MI";
      sa[304] = "St Ives  Cornwall / Hancock  MI";
      sa[305] = "St Ives  Cornwall / Houghton  MI";
      sa[306] = "St James  Long Island  NY";
      sa[307] = "St Leonards-on-Sea  England Ohio";
      sa[308] = "St Louis  MO";
      sa[309] = "Stanton  IA";
      sa[310] = "Stockholm  Sweden";
      sa[311] = "Stockholm  Sweden / Washington  DC";
      sa[312] = "Stockholm  Sweden New York";
      sa[313] = "Stoughton  MA";
      sa[314] = "Streatham  Surrey";
      sa[315] = "Strood  Kent  England Detroit  MI";
      sa[316] = "Surbiton Hill  Surrey";
      sa[317] = "Sweden  Worcester  MA";
      sa[318] = "Sweden / Arlington  NJ";
      sa[319] = "Sweden Akeley  MN";
      sa[320] = "Sweden Chicago  IL";
      sa[321] = "Sweden Joliet  IL";
      sa[322] = "Sweden Winnipeg  MN";
      sa[323] = "Sweden Worcester  MA";
      sa[324] = "Swindon  England";
      sa[325] = "Sydney  Australia";
      sa[326] = "Syria";
      sa[327] = "Syria Fredericksburg  VA";
      sa[328] = "Syria Kent  ON";
      sa[329] = "Syria New York  NY";
      sa[330] = "Syria Ottawa  ON";
      sa[331] = "Syria Youngstown  OH";
      sa[332] = "Taalintehdas  Finland Hoboken  NJ";
      sa[333] = "Tampico  MT";
      sa[334] = "Tofta  Sweden Joliet  IL";
      sa[335] = "Tokyo  Japan";
      sa[336] = "Toronto  ON";
      sa[337] = "Tranvik  Finland New York";
      sa[338] = "Treherbert  Cardiff  Wales";
      sa[339] = "Trenton  NJ";
      sa[340] = "Tuxedo Park  NY";
      sa[341] = "Union Hill  NJ";
      sa[342] = "Upper Burma  India Pittsburgh  PA";
      sa[343] = "Vadsbro  Sweden Ministee  MI";
      sa[344] = "Vancouver  BC";
      sa[345] = "Victoria  BC";
      sa[346] = "Walthamstow  England";
      sa[347] = "Warwick  England";
      sa[348] = "Washington  DC";
      sa[349] = "Waukegan  Chicago  IL";
      sa[350] = "West Bromwich  England Pontiac  MI";
      sa[351] = "West Hampstead  London / Neepawa  MB";
      sa[352] = "West Haven  CT";
      sa[353] = "West Hoboken  NJ";
      sa[354] = "West Kensington  London";
      sa[355] = "Westcliff-on-Sea  Essex";
      sa[356] = "Weston-Super-Mare  Somerset";
      sa[357] = "Weston-Super-Mare / Moose Jaw  SK";
      sa[358] = "Wiltshire  England Niagara Falls  NY";
      sa[359] = "Wimbledon Park  London / Hayling Island  Hants";
      sa[360] = "Windsor  England New York  NY";
      sa[361] = "Winnipeg  MB";
      sa[362] = "Winnipeg  MN";
      sa[363] = "Woodford County  KY";
      sa[364] = "Worcester  England";
      sa[365] = "Worcester  MA";
      sa[366] = "Yoevil  England / Cottage Grove  OR";
      sa[367] = "Youngstown  OH";
      sa[368] = "Zurich  Switzerland";
    }
  }
}
// The class representing column survived
class default_gbm_ColInfo_12 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    default_gbm_ColInfo_12_0.fill(VALUES);
  }
  static final class default_gbm_ColInfo_12_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "1";
    }
  }
}

class default_gbm_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_0_class_0.score0(fdata);
  }
}
class default_gbm_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[9]) ? 
         (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
            0.21693866f : 
            0.2591362f) : 
        -0.10961017f);
    return pred;
  } // constant pool size = 56B, number of visited nodes = 2, static init size = 288B
  // {11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111110 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -1, -1, -1, -1, -2, -1, -1, 127, -1, -1, 127, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
}


class default_gbm_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_1_class_0.score0(fdata);
  }
}
class default_gbm_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[9]) ? 
         (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
            0.18289252f : 
             (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(185, 1, data[7]) || (GenModel.bitSetIsInRange(185, 1, data[7]) && !GenModel.bitSetContains(GRPSPLIT1, 185, 1, data[7])) ? 
                 (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 369, 0, data[11])) ? 
                    0.22280827f : 
                     (data[6 /* fare */] <40.02572f ? 
                        0.22443156f : 
                        0.22280827f)) : 
                0.22544852f)) : 
        -0.10158392f);
    return pred;
  } // constant pool size = 141B, number of visited nodes = 5, static init size = 726B
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
  // {...1 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00001000 00000000 00001011}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 16, 0, -48, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 1, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
}


class default_gbm_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_2_class_0.score0(fdata);
  }
}
class default_gbm_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[9]) ? 
         (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
             (data[5 /* ticket */] <73351.0f ? 
                0.15901698f : 
                0.1982098f) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
                 (Double.isNaN(data[0]) || data[0 /* pclass */] <2.5f ? 
                    0.19827956f : 
                     (Double.isNaN(data[6]) || data[6 /* fare */] <16.010288f ? 
                        0.19827956f : 
                        0.1982397f)) : 
                0.20228659f)) : 
        -0.09443534f);
    return pred;
  } // constant pool size = 120B, number of visited nodes = 6, static init size = 576B
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 10111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11110111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -17, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 0, 0, 1, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
}


class default_gbm_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_3_class_0.score0(fdata);
  }
}
class default_gbm_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[9]) ? 
         (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
            0.14117984f : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
                 (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(185, 1, data[7]) || (GenModel.bitSetIsInRange(185, 1, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 185, 1, data[7])) ? 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 369, 0, data[11])) ? 
                        0.1806009f : 
                        0.18078898f) : 
                    0.18279742f) : 
                 (!Double.isNaN(data[7 /* cabin */]) && (GenModel.bitSetIsInRange(185, 1, data[7]) && !GenModel.bitSetContains(GRPSPLIT4, 185, 1, data[7])) ? 
                    0.18322071f : 
                    0.18360008f))) : 
        -0.08797349f);
    return pred;
  } // constant pool size = 218B, number of visited nodes = 6, static init size = 1164B
  // {11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 10111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -5, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 0, 0, 1, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 64, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {...1 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000100 00000100 00000000 00000000 10000000 00000010 00100000 00001000 00000000 00000000 00100000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 32, 32, 0, 0, 1, 64, 4, 16, 0, 0, 4, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {...1 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000001 00000010 00000000 00000010 00000000 00000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, -128, 64, 0, 64, 0, 0, 0, 0, 0, 0};
}


class default_gbm_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_4_class_0.score0(fdata);
  }
}
class default_gbm_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[9]) ? 
         (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
            0.12696768f : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
                 (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(185, 1, data[7]) || (GenModel.bitSetIsInRange(185, 1, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 185, 1, data[7])) ? 
                     (!Double.isNaN(data[2]) ? 
                        0.16727725f : 
                        0.16739704f) : 
                    0.16925792f) : 
                 (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 369, 0, data[11])) ? 
                    0.16954662f : 
                    0.1698583f))) : 
        -0.08206097f);
    return pred;
  } // constant pool size = 191B, number of visited nodes = 6, static init size = 1014B
  // {11111111 11111110 00101111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, 127, -12, -2, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
  // {00001000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00001000 00000010 00000000 00000000 00000000 00000000 00000000 00000010 00100000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {16, 0, 0, 0, 0, 0, 1, 0, 0, -128, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 64, 4, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {...1 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000100 00000100 00000000 00000001 10000000 00000010 00100000 00001000 00000000 00010000 00001000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 32, 32, 0, -128, 1, 64, 4, 16, 0, 8, 16, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
}


class default_gbm_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_5_class_0.score0(fdata);
  }
}
class default_gbm_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[9]) ? 
         (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
            0.115150854f : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
                 (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(185, 1, data[7]) || (GenModel.bitSetIsInRange(185, 1, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 185, 1, data[7])) ? 
                     (!Double.isNaN(data[2]) ? 
                        0.15691409f : 
                        0.15704255f) : 
                    0.15849699f) : 
                 (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 369, 0, data[11])) ? 
                     (!Double.isNaN(data[7 /* cabin */]) && (GenModel.bitSetIsInRange(185, 1, data[7]) && !GenModel.bitSetContains(GRPSPLIT4, 185, 1, data[7])) ? 
                        0.15869679f : 
                        0.15874885f) : 
                    0.15915596f))) : 
        -0.07659763f);
    return pred;
  } // constant pool size = 220B, number of visited nodes = 7, static init size = 1164B
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111001 11111111 11111111 11111111 01111111 11110111 11111111 11101111 11111111 11111111 11111111 11111111 01111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, 127, -1, -1, -1, -1, -1, -97, -1, -1, -1, -2, -17, -1, -9, -1, -1, -1, -1, -2, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
  // {00001000 00000001 11010000 10000000 00000000 00000000 10000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 01100000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00001000 00000010 00000000 00000000 00000000 10000000 00000000 00000010 00100000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {16, -128, 11, 1, 0, 0, 1, 0, 0, -128, 0, 0, 0, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 1, 0, 64, 4, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {...1 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000100 00000100 00000000 00000001 10000000 00000010 00100000 00001000 00000001 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 32, 32, 0, -128, 1, 64, 4, 16, -128, 1, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 10111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11110111 11111101 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -1, -1, -2, -1, -1, 127, -1, -1, -1, -1, -1, -3, -1, -1, -2, -1, -1, -1, -1, -1, -17, -65, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
  // {...1 0-bits... 00000000 00000000 00000000 00000000 10000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 1, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0};
}


class default_gbm_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_6_class_0.score0(fdata);
  }
}
class default_gbm_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[9]) ? 
         (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
            0.10497602f : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
                 (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(185, 1, data[7]) || (GenModel.bitSetIsInRange(185, 1, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 185, 1, data[7])) ? 
                     (!Double.isNaN(data[2]) ? 
                        0.14864816f : 
                        0.14877616f) : 
                    0.14993858f) : 
                 (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 369, 0, data[11])) ? 
                     (!Double.isNaN(data[7 /* cabin */]) && (GenModel.bitSetIsInRange(185, 1, data[7]) && !GenModel.bitSetContains(GRPSPLIT4, 185, 1, data[7])) ? 
                        0.1500828f : 
                        0.15012567f) : 
                     (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT5, 369, 0, data[11])) ? 
                        0.15039767f : 
                        0.15063888f)))) : 
        -0.071509846f);
    return pred;
  } // constant pool size = 272B, number of visited nodes = 8, static init size = 1452B
  // {11111111 11111111 11111111 11111100 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -1, 63, -2, -1, -1, -1, -1, -1, -1, -1, 123, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -9, -1, -1, -1, -1, -1, -1, -1, 1};
  // {00001000 00000001 11010000 10000000 00000000 00000000 10000000 00000000 00100000 00000001 00000000 00000000 00000000 00000000 00000000 01100000 00000000 00000000 10000110 00000000 00000000 00000000 10000000 00001000 00001000 00010010 00000000 00000000 00000000 10000000 10000000 00000011 00100000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {16, -128, 11, 1, 0, 0, 1, 0, 4, -128, 0, 0, 0, 0, 0, 6, 0, 0, 97, 0, 0, 0, 1, 16, 16, 72, 0, 0, 0, 1, 1, -64, 4, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {...1 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000100 00000100 00000000 00000001 10000000 00000010 00100000 00001000 00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 32, 32, 0, -128, 1, 64, 4, 16, 80, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 10111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11110111 11111101 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -1, -1, -2, -1, -1, 127, -1, -1, -1, -1, -1, -3, -1, -1, -2, -1, -1, -1, -1, -1, -17, -65, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
  // {...1 0-bits... 10000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0};
  // {11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11011111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -5, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
}


class default_gbm_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_7_class_0.score0(fdata);
  }
}
class default_gbm_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[9]) ? 
         (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
            0.09591202f : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
                 (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(185, 1, data[7]) || (GenModel.bitSetIsInRange(185, 1, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 185, 1, data[7])) ? 
                     (!Double.isNaN(data[2]) ? 
                        0.14192742f : 
                        0.14203371f) : 
                    0.14299624f) : 
                 (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 369, 0, data[11])) ? 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 369, 0, data[11])) ? 
                        0.14310595f : 
                        0.14332347f) : 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT5, 369, 0, data[11])) ? 
                        0.1435379f : 
                        0.14377832f)))) : 
        -0.06674333f);
    return pred;
  } // constant pool size = 295B, number of visited nodes = 8, static init size = 1590B
  // {11111111 11111111 11111111 11111111 11101111 10011010 11101111 10111101 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -1, -1, -9, 89, -9, -67, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
  // {00001000 00000001 11010000 10000011 10000000 00000000 10000000 00000000 00100000 00000001 00000000 00000000 00100000 00000000 00000000 01100000 00000000 00000000 10000110 00000000 00000000 00000000 10000000 00001000 00101000 00010010 00000000 00000000 00000000 10000000 10000000 00000011 00100000 00000000 00000000 00010000 00000010 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {16, -128, 11, -63, 1, 0, 1, 0, 4, -128, 0, 0, 4, 0, 0, 6, 0, 0, 97, 0, 0, 0, 1, 16, 20, 72, 0, 0, 0, 1, 1, -64, 4, 0, 0, 8, 64, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0};
  // {...1 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000100 00000100 00000000 00000001 10000000 00000010 00100000 00001000 00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 32, 32, 0, -128, 1, 64, 4, 16, 8, 0, 0, 0, 0};
  // {11110111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 10011111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11110111 11111101 11111111 11111111 11111111 11111111 11111111 11111101 11011111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT3 = new byte[] {-17, -1, -1, -1, -1, -1, -2, -1, -1, 127, -1, -1, -1, -1, -1, -7, -1, -1, -2, -1, -1, -1, -1, -1, -17, -65, -1, -1, -1, -1, -1, -65, -5, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
  // {11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -2, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
  // {00000000 00000000 00000000 00000011 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000010 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, -64, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 64, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0};
}


class default_gbm_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_8_class_0.score0(fdata);
  }
}
class default_gbm_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[9]) ? 
         (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
            0.08758042f : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
                 (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(185, 1, data[7]) || (GenModel.bitSetIsInRange(185, 1, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 185, 1, data[7])) ? 
                     (!Double.isNaN(data[2]) ? 
                        0.13637938f : 
                        0.1364683f) : 
                    0.13727523f) : 
                 (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 369, 0, data[11])) ? 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 369, 0, data[11])) ? 
                        0.1373702f : 
                        0.1376037f) : 
                     (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT5, 369, 0, data[11])) ? 
                        0.13779011f : 
                        0.13802232f)))) : 
        -0.06225796f);
    return pred;
  } // constant pool size = 295B, number of visited nodes = 8, static init size = 1590B
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111101 10101111 11111111 01100111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -67, -11, -1, -26, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, 1};
  // {00001000 00000001 11010000 10000011 10010000 01100101 10010000 01000010 00100000 00000001 00000000 00000000 00100000 00000000 00000000 01100000 00000000 00000000 10000110 00000000 00000000 00000000 10000000 00001000 00101000 00010010 00000000 00000000 00000000 10000000 10000000 00000011 00100000 00000000 00000000 00010000 00000010 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {16, -128, 11, -63, 9, -90, 9, 66, 4, -128, 0, 0, 4, 0, 0, 6, 0, 0, 97, 0, 0, 0, 1, 16, 20, 72, 0, 0, 0, 1, 1, -64, 4, 0, 0, 8, 64, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0};
  // {...1 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000100 00000100 00000000 00000001 10000000 00000010 00100000 00001101 00000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 32, 32, 0, -128, 1, 64, 4, -80, 0, 0, 0, 0, 0};
  // {11110111 11111110 00101111 01111111 11111111 11111111 01111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 10011111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11110111 11111101 11111111 11111111 11111111 01111111 11111111 11111101 11011111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT3 = new byte[] {-17, 127, -12, -2, -1, -1, -2, -1, -1, 127, -1, -1, -1, -1, -1, -7, -1, -1, -2, -1, -1, -1, -1, -1, -17, -65, -1, -1, -1, -2, -1, -65, -5, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
  // {11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 10111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11110111 11111101 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -2, -1, -1, 127, -1, -1, -1, -1, -1, -3, -1, -1, -2, -1, -1, -1, -1, -1, -17, -65, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111001 11111111 11111111 11111111 01111111 11110111 11111111 11101111 11111111 11111111 11111111 11111111 01111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -5, -1, -1, -1, -1, -1, -97, -1, -1, -1, -2, -17, -1, -9, -1, -1, -1, -1, -2, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
}


class default_gbm_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_9_class_0.score0(fdata);
  }
}
class default_gbm_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[9]) ? 
         (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
            0.07977178f : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
                 (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(185, 1, data[7]) || (GenModel.bitSetIsInRange(185, 1, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 185, 1, data[7])) ? 
                     (!Double.isNaN(data[2]) ? 
                        0.13174084f : 
                        0.13181636f) : 
                    0.13249974f) : 
                 (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 369, 0, data[11])) ? 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 369, 0, data[11])) ? 
                        0.13257365f : 
                        0.13277544f) : 
                     (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT5, 369, 0, data[11])) ? 
                        0.13298538f : 
                        0.13325685f)))) : 
        -0.058024157f);
    return pred;
  } // constant pool size = 295B, number of visited nodes = 8, static init size = 1590B
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111110 01101010 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 125, 86, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, 1};
  // {00001000 00000001 11010000 10000011 10010000 01100101 10010000 01000010 01100010 01010001 00000000 10011000 00100000 00000000 00000000 01100000 00000000 00000000 10000110 00000000 00000000 00000000 10000000 00001000 00101000 00010010 00000000 00000000 00000000 10000000 10000000 00000011 00100000 00000000 00000000 00010000 00000010 00000000 00010000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {16, -128, 11, -63, 9, -90, 9, 66, 70, -118, 0, 25, 4, 0, 0, 6, 0, 0, 97, 0, 0, 0, 1, 16, 20, 72, 0, 0, 0, 1, 1, -64, 4, 0, 0, 8, 64, 0, 8, 0, 0, 0, 16, 0, 0, 0, 0};
  // {...1 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000100 00000100 00000000 00000001 10000000 00000010 00100000 10101000 00000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 32, 32, 0, -128, 1, 64, 4, 21, 0, 0, 0, 0, 0};
  // {11110111 11111110 00101111 01111111 11111111 11111111 01111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 10011111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11110111 11111101 11111111 11111111 11111111 01111111 01111111 11111101 11011111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT3 = new byte[] {-17, 127, -12, -2, -1, -1, -2, -1, -1, 127, -1, -1, -1, -1, -1, -7, -1, -1, -2, -1, -1, -1, -1, -1, -17, -65, -1, -1, -1, -2, -2, -65, -5, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
  // {11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 10111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11110111 11111101 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -2, -1, -1, 127, -1, -1, -1, -1, -1, -3, -1, -1, -2, -1, -1, -1, -1, -1, -17, -65, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
  // {11111111 11111111 11111111 11111100 01111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111001 11111111 11111111 11111111 01111111 11110111 11011111 11101111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111101 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, 63, -2, -1, -1, -1, -5, -1, -1, -1, -5, -1, -1, -1, -1, -1, -97, -1, -1, -1, -2, -17, -5, -9, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -65, -1, -9, -1, -1, -1, -1, -1, -1, -1, 1};
}


class default_gbm_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_10_class_0.score0(fdata);
  }
}
class default_gbm_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
         (!Double.isNaN(data[9]) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 366, 0, data[11])) ? 
                0.07227172f : 
                 (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(366, 0, data[11]) || (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 366, 0, data[11])) ? 
                     (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(182, 4, data[7]) || (GenModel.bitSetIsInRange(182, 4, data[7]) && !GenModel.bitSetContains(GRPSPLIT3, 182, 4, data[7])) ? 
                        0.12781802f : 
                        0.12791032f) : 
                    0.1288589f)) : 
            -0.083046526f) : 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 369, 0, data[11])) ? 
             (Double.isNaN(data[10]) || data[10 /* body */] <8.5f ? 
                 (!Double.isNaN(data[7 /* cabin */]) && (GenModel.bitSetIsInRange(183, 1, data[7]) && !GenModel.bitSetContains(GRPSPLIT5, 183, 1, data[7])) ? 
                    -0.04873897f : 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(354, 15, data[11]) || (GenModel.bitSetIsInRange(354, 15, data[11]) && !GenModel.bitSetContains(GRPSPLIT6, 354, 15, data[11])) ? 
                        0.121181816f : 
                        0.36644685f)) : 
                -0.12793228f) : 
            0.4403006f));
    return pred;
  } // constant pool size = 320B, number of visited nodes = 9, static init size = 1704B
  // {00000000 00000001 11010100 10100010 10110000 01000001 10010000 01000000 01100010 01110001 00000000 10011000 01100100 00010101 01101010 01100011 00000000 01000010 10000110 00110001 01100001 10000001 10001000 00001011 10000011 11011010 11010100 00010000 01000000 10001011 10010011 00001011 00100000 10001000 10000010 01010000 00001000 10000000 00011000 00010000 00000000 01001100 10001100 00001000 10000000 00001011 1}
  public static final byte[] GRPSPLIT0 = new byte[] {0, -128, 43, 69, 13, -126, 9, 2, 70, -114, 0, 25, 38, -88, 86, -58, 0, 66, 97, -116, -122, -127, 17, -48, -63, 91, 43, 8, 2, -47, -55, -48, 4, 17, 65, 10, 16, 1, 24, 8, 0, 50, 49, 16, 1, -48, 1};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111011 11111011 11111111 11111111 11111111 11001001 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -33, -33, -1, -1, -1, -109, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63};
  // {00001000 00000000 00000000 00000001 00000000 00100100 00000000 00000010 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00101000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, -128, 0, 36, 0, 64, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {...4 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000001 00001000 00000000 00000000 00000000 00000000 10001000 00000000 01000000 01000000 00000000 00000000 00000000 00000000 00}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, 16, -128, 16, 0, 0, 0, 0, 17, 0, 2, 2, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000100 00100000 00000000 00000000 00000000 00000000 01000000 00100000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00001000 00000010 00000000 01000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00010000 00000000 01000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 32, 4, 0, 0, 0, 0, 2, 4, 0, 0, 0, 0, 16, 0, 0, 0, 0, -128, 0, 0, 16, 64, 0, 2, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 8, 0, 2, 0, 0, 0, 0, 0};
  // {...1 0-bits... 11111111 11011111 11111111 11111111 11101111 11111111 11111011 01111111 11111111 11111111 11111111 11111111 11011111 10111111 11111111 11111110 11111111 11111111 11111111 11111111 01111111 10111111 111111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -5, -1, -1, -9, -1, -33, -2, -1, -1, -1, -1, -5, -3, -1, 127, -1, -1, -1, -1, -2, -3, 127};
  // {...15 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010010 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000100 000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0};
}


class default_gbm_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_11_class_0.score0(fdata);
  }
}
class default_gbm_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
             (Double.isNaN(data[9]) || data[9 /* boat */] <1.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* age */] <7.602569f ? 
                     (data[5 /* ticket */] <49127.5f ? 
                        0.033664484f : 
                        -0.100574836f) : 
                     (Double.isNaN(data[5]) || data[5 /* ticket */] <339809.5f ? 
                        -0.12589857f : 
                        -0.103752166f)) : 
                 (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 366, 0, data[11])) ? 
                    0.06590217f : 
                     (Double.isNaN(data[6]) || data[6 /* fare */] <16.010288f ? 
                        0.12448686f : 
                        0.12501748f))) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 369, 0, data[11])) ? 
                 (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(186, 0, data[7]) || (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT4, 186, 0, data[7])) ? 
                     (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT5, 369, 0, data[11])) ? 
                        0.041091908f : 
                        0.12519851f) : 
                    0.2052553f) : 
                0.26847944f)) : 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT6, 369, 0, data[11])) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT7, 369, 0, data[11])) ? 
                -0.1257063f : 
                 (data[5 /* ticket */] <242915.5f ? 
                     (!Double.isNaN(data[9]) ? 
                        0.12507075f : 
                        0.2677492f) : 
                     (!Double.isNaN(data[9]) ? 
                        0.12498266f : 
                        -0.042679027f))) : 
            0.33179623f));
    return pred;
  } // constant pool size = 379B, number of visited nodes = 16, static init size = 1902B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00000000 00000001 10010000 00000000 10000000 00000000 00000000 01000000 01000000 01000000 00000000 00000000 00000000 00000000 01101000 00000010 00000000 00000000 00000010 00100001 00000000 10000000 10000000 00000010 10000001 01001000 10010000 00000000 01000010 00000000 00010001 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00001000 00010000 00000000 00001100 10001000 00001000 00000000 00000000 1}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -128, 9, 0, 1, 0, 0, 2, 2, 2, 0, 0, 0, 0, 22, 64, 0, 0, 64, -124, 0, 1, 1, 64, -127, 18, 9, 0, 66, 0, -120, 0, 0, 16, 0, 0, 0, 0, 16, 8, 0, 48, 17, 16, 0, 0, 1};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -17, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 01001000 00000010 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000010 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 18, 64, 0, 0, 0, -128, 0, 0, 0, 64, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0};
  // {11111101 11111111 11111111 11111111 11110110 11110011 11111111 11111110 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11}
  public static final byte[] GRPSPLIT4 = new byte[] {-65, -1, -1, -1, 111, -49, -1, 127, -1, -1, -1, -1, -9, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, 3};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 01111111 11111111 11111111 01111110 11110111 01101111 11111111 10111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -2, -1, -1, 126, -17, -10, -1, -3, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, 1};
  // {00000000 00000000 00000100 00100000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00100101 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 01000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00001000 00000000 00000000 00010000 00000000 01000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 32, 4, 0, 0, 0, 0, 0, 4, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 2, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0, 16, 0, 0, 8, 0, 2, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 01111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10101111 11011111 01111111 11111111 11111111 11111111 11111011 11111101 11111111 11110111 11111011 11111111 11011111 11110111 11111111 11111111 11111111 11111111 11111110 11010111 01011111 11111101 11111111 11111101 11111111 1}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, 127, -2, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -11, -5, -2, -1, -1, -1, -33, -65, -1, -17, -33, -1, -5, -17, -1, -1, -1, -1, 127, -21, -6, -65, -1, -65, -1, 1};
}


class default_gbm_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_12_class_0.score0(fdata);
  }
}
class default_gbm_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
             (Double.isNaN(data[9]) || data[9 /* boat */] <1.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* age */] <7.602569f ? 
                     (data[5 /* ticket */] <49127.5f ? 
                        0.029673845f : 
                        -0.09652224f) : 
                     (Double.isNaN(data[5]) || data[5 /* ticket */] <339809.5f ? 
                        -0.12283655f : 
                        -0.09979037f)) : 
                 (Double.isNaN(data[3]) || data[3 /* sibsp */] <0.5f ? 
                     (data[0 /* pclass */] <2.5f ? 
                        0.12268782f : 
                        0.12161977f) : 
                    0.065226056f)) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 369, 0, data[11])) ? 
                 (data[2 /* age */] <24.331728f ? 
                    0.18390155f : 
                    0.068176724f) : 
                0.2237914f)) : 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 369, 0, data[11])) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 369, 0, data[11])) ? 
                -0.12266972f : 
                 (data[5 /* ticket */] <242915.5f ? 
                     (!Double.isNaN(data[9]) ? 
                        0.122124426f : 
                        0.20725444f) : 
                     (!Double.isNaN(data[9]) ? 
                        0.12204914f : 
                        -0.039456382f))) : 
            0.2687125f));
    return pred;
  } // constant pool size = 255B, number of visited nodes = 15, static init size = 1182B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00000000 00000001 10010000 00000000 10000000 00000000 00000000 01000000 01000000 01000000 00000000 00000000 00000000 00000000 01101000 00000010 00000000 00000000 00000010 00100001 00000000 10000000 10000000 00000010 10000001 01001000 10010000 00000000 01000010 00000000 00010001 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00001000 00010000 00000000 00001100 10001000 00001000 00000000 00000000 1}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -128, 9, 0, 1, 0, 0, 2, 2, 2, 0, 0, 0, 0, 22, 64, 0, 0, 64, -124, 0, 1, 1, 64, -127, 18, 9, 0, 66, 0, -120, 0, 0, 16, 0, 0, 0, 0, 16, 8, 0, 48, 17, 16, 0, 0, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00100001 00000000 00000000 00000000 00000010 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00001000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, -124, 0, 0, 0, 64, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0};
  // {00000000 00000000 00000100 00100000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00100101 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 01000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00001000 00000000 00000000 00010000 00000000 01000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 32, 4, 0, 0, 0, 0, 0, 4, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 2, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0, 16, 0, 0, 8, 0, 2, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 01111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10101111 11011111 01111111 11111111 11111111 11111111 11111011 11111101 11111111 11110111 11111011 11111111 11011111 11110111 11111111 11111111 11111111 11111111 11111110 11010111 01011111 11111101 11111111 11111101 11111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, 127, -2, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -11, -5, -2, -1, -1, -1, -33, -65, -1, -17, -33, -1, -5, -17, -1, -1, -1, -1, 127, -21, -6, -65, -1, -65, -1, 1};
}


class default_gbm_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_13_class_0.score0(fdata);
  }
}
class default_gbm_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
             (Double.isNaN(data[9]) || data[9 /* boat */] <1.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* age */] <7.602569f ? 
                     (data[5 /* ticket */] <49127.5f ? 
                        0.026229559f : 
                        -0.09267852f) : 
                     (Double.isNaN(data[5]) || data[5 /* ticket */] <339809.5f ? 
                        -0.120200254f : 
                        -0.09605084f)) : 
                 (data[5 /* ticket */] <182356.5f ? 
                    0.054360785f : 
                     (data[2 /* age */] <32.651707f ? 
                        0.11950568f : 
                        0.1200051f))) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 369, 0, data[11])) ? 
                 (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(186, 0, data[7]) || (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT3, 186, 0, data[7])) ? 
                     (Double.isNaN(data[2]) || data[2 /* age */] <24.036482f ? 
                        0.13966751f : 
                        -0.0040419423f) : 
                    0.1823752f) : 
                0.18962732f)) : 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 369, 0, data[11])) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT5, 369, 0, data[11])) ? 
                 (Double.isNaN(data[6]) || data[6 /* fare */] <28.018003f ? 
                     (data[6 /* fare */] <13.682126f ? 
                        -0.12005263f : 
                        -0.120841876f) : 
                    -0.07226335f) : 
                 (data[5 /* ticket */] <279251.0f ? 
                     (!Double.isNaN(data[9]) ? 
                        0.119592786f : 
                        0.16931315f) : 
                     (!Double.isNaN(data[9]) ? 
                        0.11948332f : 
                        -0.033369355f))) : 
            0.23014247f));
    return pred;
  } // constant pool size = 292B, number of visited nodes = 18, static init size = 1332B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00000000 00000001 10010000 00000000 10000000 00000000 00000000 01000000 01000000 01000000 00000000 00000000 00000000 00000000 01101000 00000010 00000000 00000000 00000010 00100001 00000000 10000000 10000000 00000010 10000001 01001000 10010000 00000000 01000010 00000000 00010001 00000010 00000000 00001000 00000000 00010000 00000000 00000000 00001000 00010000 00000000 00001100 10001000 00001000 00000000 00000000 1}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -128, 9, 0, 1, 0, 0, 2, 2, 2, 0, 0, 0, 0, 22, 64, 0, 0, 64, -124, 0, 1, 1, 64, -127, 18, 9, 0, 66, 0, -120, 64, 0, 16, 0, 8, 0, 0, 16, 8, 0, 48, 17, 16, 0, 0, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00001000 00000010 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000010 00000000 01000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, -128, 0, 0, 0, 64, 0, 2, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0};
  // {00000010 00000010 00000000 00000000 00000000 00001110 00000000 00000001 00000000 00000000 00000000 00010000 00000100 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 64, 0, 0, 0, 112, 0, -128, 0, 0, 0, 8, 32, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000100 00100000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00100101 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 01000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00001000 00000000 00000000 00010000 00000000 01000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 32, 4, 0, 0, 0, 0, 0, 4, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 2, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0, 16, 0, 0, 8, 0, 2, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 01111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10101111 11011111 01111111 11110111 11111111 11111111 11111011 11101101 11111111 11110111 11111011 11111111 11011111 11110111 11111111 11111111 11111111 11111111 11111110 11010111 01011111 11111101 11111111 11111101 11111111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, 127, -2, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -11, -5, -2, -17, -1, -1, -33, -73, -1, -17, -33, -1, -5, -17, -1, -1, -1, -1, 127, -21, -6, -65, -1, -65, -1, 1};
}


class default_gbm_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_14_class_0.score0(fdata);
  }
}
class default_gbm_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[9]) ? 
         (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
            0.03482361f : 
             (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(185, 1, data[7]) || (GenModel.bitSetIsInRange(185, 1, data[7]) && !GenModel.bitSetContains(GRPSPLIT1, 185, 1, data[7])) ? 
                 (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 369, 0, data[11])) ? 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 369, 0, data[11])) ? 
                        0.11707743f : 
                        0.117683746f) : 
                    0.11997009f) : 
                0.11984636f)) : 
        -0.042940598f);
    return pred;
  } // constant pool size = 189B, number of visited nodes = 5, static init size = 1014B
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 10111111 11111111 11111111 11011110 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11110111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -3, -3, -1, -1, 123, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -17, -17, -1, -1, -1, 1};
  // {...1 0-bits... 00000000 00000000 00100000 01000000 00000010 10000000 00000100 00000000 00000000 00000000 00000000 00000000 00000100 01000000 00000000 00000001 10000010 00000000 00001001 00000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 4, 2, 64, 1, 32, 0, 0, 0, 0, 0, 32, 2, 0, -128, 65, 0, -112, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 10000000 10000000 00000000 00001000 00000000 00000000 00000000 01000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 1, 1, 0, 16, 0, 0, 0, 2, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0};
  // {11111111 11111111 01111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111011 11111111 11111111 11011101 11111110 11111111 10111101 11111111 11101111 10011110 11111110 11111111 11111110 11111100 01110111 10101111 11101111 11111110 11111100 11111101 11111111 11101111 01111011 01101111 10101111 11101111 01111111 11111101 11111011 11111111 11111111 01111011 11101111 01111111 10110100 1}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -2, -1, -5, -1, -1, -1, -1, -1, -1, -33, -1, -1, -69, 127, -1, -67, -1, -9, 121, 127, -1, 127, 63, -18, -11, -9, 127, 63, -65, -1, -9, -34, -10, -11, -9, -2, -65, -33, -1, -1, -34, -9, -2, 45, 1};
}


class default_gbm_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_15_class_0.score0(fdata);
  }
}
class default_gbm_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
             (Double.isNaN(data[9]) || data[9 /* boat */] <1.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* age */] <7.602569f ? 
                     (data[5 /* ticket */] <49127.5f ? 
                        0.028160997f : 
                        -0.08728377f) : 
                     (Double.isNaN(data[5]) || data[5 /* ticket */] <339809.5f ? 
                        -0.117180005f : 
                        -0.09088727f)) : 
                 (data[5 /* ticket */] <49127.5f ? 
                    0.048209745f : 
                     (data[0 /* pclass */] <2.5f ? 
                        0.116241015f : 
                        0.115398906f))) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 369, 0, data[11])) ? 
                 (data[2 /* age */] <21.379255f ? 
                    0.17602569f : 
                     (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(354, 15, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 354, 15, data[11])) ? 
                        0.0056190346f : 
                        0.10545414f)) : 
                0.17416851f)) : 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 369, 0, data[11])) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT5, 369, 0, data[11])) ? 
                 (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT6, 369, 0, data[11])) ? 
                    -0.11770824f : 
                    -0.117029935f) : 
                 (data[5 /* ticket */] <242915.5f ? 
                     (!Double.isNaN(data[9]) ? 
                        0.1155604f : 
                        0.14918523f) : 
                     (!Double.isNaN(data[9]) ? 
                        0.115409315f : 
                        -0.03016029f))) : 
            0.208629f));
    return pred;
  } // constant pool size = 357B, number of visited nodes = 17, static init size = 1746B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00000000 00000001 10010000 00000000 10000000 00000000 00000000 01000000 01000000 01000000 00000000 00000000 00000000 00000000 01101000 00000010 00000000 00000000 00000010 00100001 00000000 10000000 10000000 00000010 10000001 01001000 10010000 00000000 01000010 00000000 00010001 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00001000 00010000 00000000 00001100 10001000 00001000 00000000 00000000 1}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -128, 9, 0, 1, 0, 0, 2, 2, 2, 0, 0, 0, 0, 22, 64, 0, 0, 64, -124, 0, 1, 1, 64, -127, 18, 9, 0, 66, 0, -120, 0, 0, 16, 0, 0, 0, 0, 16, 8, 0, 48, 17, 16, 0, 0, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 01001000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000010 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00001000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, -128, 0, 0, 0, 64, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0};
  // {...15 0-bits... 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 01000000 00000000 01000000 00000000 01000000 00000000 00100000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00000010 00000000 00000000 000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 2, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 32, 0, 0, 64, 0, 0, 0, 0, 2};
  // {00000000 00000000 00000100 00100000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00100101 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 01000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00001000 00000000 00000000 00010000 00000000 01000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 32, 4, 0, 0, 0, 0, 0, 4, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 2, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0, 16, 0, 0, 8, 0, 2, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 01111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10101111 11011111 01111111 11111111 11111111 11111111 11111011 11111101 11111111 11110111 11111011 11111111 11011111 11110111 11111111 11111111 11111111 11111111 11111110 11010111 01011111 11111101 11111111 11111101 11111111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, 127, -2, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -11, -5, -2, -1, -1, -1, -33, -65, -1, -17, -33, -1, -5, -17, -1, -1, -1, -1, 127, -21, -6, -65, -1, -65, -1, 1};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111101 11111111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, 127, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -5, -1, -1, -1, -65, -1, 1};
}


class default_gbm_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_16_class_0.score0(fdata);
  }
}
class default_gbm_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
             (Double.isNaN(data[9]) || data[9 /* boat */] <1.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* age */] <7.602569f ? 
                     (data[5 /* ticket */] <49127.5f ? 
                        0.024918221f : 
                        -0.08377417f) : 
                     (Double.isNaN(data[5]) || data[5 /* ticket */] <339809.5f ? 
                        -0.115281194f : 
                        -0.087496415f)) : 
                 (Double.isNaN(data[3]) || data[3 /* sibsp */] <0.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* fare */] <20.01286f ? 
                        0.113811865f : 
                        0.114668526f) : 
                    0.04345938f)) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 369, 0, data[11])) ? 
                 (data[2 /* age */] <24.331728f ? 
                    0.17260417f : 
                    0.026988402f) : 
                0.187029f)) : 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 369, 0, data[11])) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 369, 0, data[11])) ? 
                 (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT5, 369, 0, data[11])) ? 
                    -0.115743935f : 
                    -0.115147844f) : 
                 (data[5 /* ticket */] <242915.5f ? 
                     (!Double.isNaN(data[9]) ? 
                        0.11386311f : 
                        0.1278223f) : 
                     (!Double.isNaN(data[9]) ? 
                        0.1137303f : 
                        -0.027706226f))) : 
            0.18863548f));
    return pred;
  } // constant pool size = 307B, number of visited nodes = 16, static init size = 1470B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00000000 00000001 10010000 00000000 10000000 00000000 00000000 01000000 01000000 01000000 00000000 00000000 00000000 00000000 01101000 00000010 00000000 00000000 00000010 00100001 00000000 10000000 10000000 00000010 10000001 01001000 10010000 00000000 01000010 00000000 00010001 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00001000 00010000 00000000 00001100 10001000 00001000 00000000 00000000 1}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -128, 9, 0, 1, 0, 0, 2, 2, 2, 0, 0, 0, 0, 22, 64, 0, 0, 64, -124, 0, 1, 1, 64, -127, 18, 9, 0, 66, 0, -120, 0, 0, 16, 0, 0, 0, 0, 16, 8, 0, 48, 17, 16, 0, 0, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000001 00000000 10000000 00000000 00000010 00000000 01000000 00000000 00000000 01000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, -128, 0, 1, 0, 64, 0, 2, 0, 0, 2, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000100 00100000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00100101 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 01000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00001000 00000000 00000000 00010000 00000000 01000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 32, 4, 0, 0, 0, 0, 0, 4, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 2, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0, 16, 0, 0, 8, 0, 2, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 01111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10101111 11011111 01111111 11111111 11111111 11111111 11111011 11111101 11111111 11110111 11111011 11111111 11011111 11110111 11111111 11111111 11111111 11111111 11111110 11010111 01011111 11111101 11111111 11111101 11111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, 127, -2, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -11, -5, -2, -1, -1, -1, -33, -65, -1, -17, -33, -1, -5, -17, -1, -1, -1, -1, 127, -21, -6, -65, -1, -65, -1, 1};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 11011111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111101 11111111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -5, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -5, -1, -1, -1, -65, -1, 1};
}


class default_gbm_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_17_class_0.score0(fdata);
  }
}
class default_gbm_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
             (Double.isNaN(data[9]) || data[9 /* boat */] <1.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* age */] <7.602569f ? 
                     (data[5 /* ticket */] <49127.5f ? 
                        0.022097271f : 
                        -0.080348596f) : 
                     (data[6 /* fare */] <8.21875f ? 
                        -0.08903637f : 
                        -0.11384132f)) : 
                 (Double.isNaN(data[5]) || data[5 /* ticket */] <24903.5f ? 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(236, 48, data[11]) || (GenModel.bitSetIsInRange(236, 48, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 236, 48, data[11])) ? 
                        0.11248419f : 
                        0.11467327f) : 
                    0.05259989f)) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 369, 0, data[11])) ? 
                 (data[2 /* age */] <24.331728f ? 
                    0.16507734f : 
                    0.023685552f) : 
                0.17312407f)) : 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 369, 0, data[11])) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT5, 369, 0, data[11])) ? 
                 (data[5 /* ticket */] <242915.5f ? 
                    -0.06924045f : 
                    -0.11444487f) : 
                 (data[5 /* ticket */] <279251.0f ? 
                     (!Double.isNaN(data[9]) ? 
                        0.112307824f : 
                        0.111244075f) : 
                     (!Double.isNaN(data[9]) ? 
                        0.1122349f : 
                        -0.022328258f))) : 
            0.17370635f));
    return pred;
  } // constant pool size = 290B, number of visited nodes = 16, static init size = 1368B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00000000 00000001 10010000 00000000 10000000 00000000 00000000 01000000 01000000 01000000 00000000 00000000 00000000 00000000 01101000 00000010 00000000 00000000 00000010 00100001 00000000 10000000 10000000 00000010 10000001 01001000 10010000 00000000 01000010 00000000 00010001 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00001000 00010000 00000000 00001100 10001000 00001000 00000000 00000000 1}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -128, 9, 0, 1, 0, 0, 2, 2, 2, 0, 0, 0, 0, 22, 64, 0, 0, 64, -124, 0, 1, 1, 64, -127, 18, 9, 0, 66, 0, -120, 0, 0, 16, 0, 0, 0, 0, 16, 8, 0, 48, 17, 16, 0, 0, 1};
  // {...48 0-bits... 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000010 00000001 00000000 00000000 00000000 00000010 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000100 00000000 00000000 00000000 00000000 1}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 16, 0, 0, 0, 64, -128, 0, 0, 0, 64, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 32, 0, 0, 0, 0, 1};
  // {00000000 00000000 00000100 00100000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00100101 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 01000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00001000 00000000 00000000 00010000 00000000 01000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 32, 4, 0, 0, 0, 0, 0, 4, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 2, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0, 16, 0, 0, 8, 0, 2, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 01111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10101111 11011111 01111111 11110111 11111111 11111111 11111011 11101101 11111111 11110111 11111011 11111111 11011111 11110111 11111111 11111111 11111111 11111111 11111110 11010111 01011111 11111101 11111111 11111101 11111111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, 127, -2, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -11, -5, -2, -17, -1, -1, -33, -73, -1, -17, -33, -1, -5, -17, -1, -1, -1, -1, 127, -21, -6, -65, -1, -65, -1, 1};
}


class default_gbm_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_18_class_0.score0(fdata);
  }
}
class default_gbm_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
             (Double.isNaN(data[9]) || data[9 /* boat */] <1.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* age */] <7.602569f ? 
                     (Double.isNaN(data[4]) || data[4 /* parch */] <0.5f ? 
                        -0.062248774f : 
                        0.056418788f) : 
                     (Double.isNaN(data[5]) || data[5 /* ticket */] <339809.5f ? 
                        -0.11221795f : 
                        -0.080495596f)) : 
                 (data[5 /* ticket */] <49127.5f ? 
                    0.033322282f : 
                     (Double.isNaN(data[5]) || data[5 /* ticket */] <56583.5f ? 
                        0.111276075f : 
                        0.11213932f))) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 369, 0, data[11])) ? 
                 (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(186, 0, data[7]) || (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT3, 186, 0, data[7])) ? 
                     (data[2 /* age */] <24.036482f ? 
                        0.14756714f : 
                        -0.049439996f) : 
                    0.13665247f) : 
                0.16193846f)) : 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 369, 0, data[11])) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT5, 369, 0, data[11])) ? 
                 (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT6, 369, 0, data[11])) ? 
                    -0.11264561f : 
                    -0.11204094f) : 
                 (Double.isNaN(data[3]) || data[3 /* sibsp */] <2.5f ? 
                     (data[5 /* ticket */] <244708.5f ? 
                        0.112110466f : 
                        0.049832612f) : 
                    -0.09693637f)) : 
            0.1621701f));
    return pred;
  } // constant pool size = 336B, number of visited nodes = 16, static init size = 1620B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00000000 00000001 10010000 00000000 10000000 00000000 00000000 01000000 01000000 01000000 00000000 00000000 00000000 00000000 01101000 00000010 00000000 00000000 00000010 00100001 00000000 10000000 10000000 00000010 10000001 01001000 10010000 00000000 01000010 00000000 00010001 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00001000 00010000 00000000 00001100 10001000 00001000 00000000 00000000 1}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -128, 9, 0, 1, 0, 0, 2, 2, 2, 0, 0, 0, 0, 22, 64, 0, 0, 64, -124, 0, 1, 1, 64, -127, 18, 9, 0, 66, 0, -120, 0, 0, 16, 0, 0, 0, 0, 16, 8, 0, 48, 17, 16, 0, 0, 1};
  // {00000000 00000000 00000000 00000000 10000000 00000000 00000000 01000000 01000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000010 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, -128, 0, 0, 0, 64, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 8, 0, 0, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11101111 11111111 11111111 11111111 11111101 11111111 11111111 11110111 11111111 11111111 11111111 11}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -17, -1, -1, -1, -1, 127, -1, -1, -9, -1, -1, -1, -65, -1, -1, -17, -1, -1, -1, 3};
  // {00000000 00000000 00000100 00100000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00100101 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 01000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00001000 00000000 00000000 00010000 00000000 01000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 32, 4, 0, 0, 0, 0, 0, 4, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 2, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0, 16, 0, 0, 8, 0, 2, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 01111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10101111 11011111 01111111 11111111 11111111 11111111 11111011 11111101 11111111 11110111 11111011 11111111 11011111 11110111 11111111 11111111 11111111 11111111 11111110 11010111 01011111 11111101 11111111 11111101 11111111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, 127, -2, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -11, -5, -2, -1, -1, -1, -33, -65, -1, -17, -33, -1, -5, -17, -1, -1, -1, -1, 127, -21, -6, -65, -1, -65, -1, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 10000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01010000 00000000 10000000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, -128, 1, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 1, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0};
}


class default_gbm_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_19_class_0.score0(fdata);
  }
}
class default_gbm_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
         (!Double.isNaN(data[9]) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 366, 0, data[11])) ? 
                -0.0017013814f : 
                 (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(366, 0, data[11]) || (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 366, 0, data[11])) ? 
                     (!Double.isNaN(data[7 /* cabin */]) && (GenModel.bitSetIsInRange(182, 4, data[7]) && !GenModel.bitSetContains(GRPSPLIT3, 182, 4, data[7])) ? 
                        0.10965277f : 
                        0.110242836f) : 
                    0.111968845f)) : 
            -0.05329275f) : 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 369, 0, data[11])) ? 
             (!Double.isNaN(data[7 /* cabin */]) && (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT5, 186, 0, data[7])) ? 
                -0.11068891f : 
                 (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(186, 0, data[7]) || (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT6, 186, 0, data[7])) ? 
                     (!Double.isNaN(data[9]) ? 
                        0.11062215f : 
                        -0.00234119f) : 
                    0.1521565f)) : 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT7, 369, 0, data[11])) ? 
                0.13971366f : 
                0.15564504f)));
    return pred;
  } // constant pool size = 350B, number of visited nodes = 10, static init size = 1872B
  // {00000000 00000001 11010100 10100010 10110000 01000001 10010000 01000000 01100010 01110001 00000000 10011000 01100100 00010101 01101010 01100011 00000000 01000010 10000110 00110001 01100001 10000001 10001000 00001011 10000011 11011010 11010100 00010000 01000000 10001011 10010011 00000011 00100000 10001000 10000010 01010000 00001000 10000000 00011000 00010000 00000000 01001100 10001100 00001000 10000000 01001011 1}
  public static final byte[] GRPSPLIT0 = new byte[] {0, -128, 43, 69, 13, -126, 9, 2, 70, -114, 0, 25, 38, -88, 86, -58, 0, 66, 97, -116, -122, -127, 17, -48, -63, 91, 43, 8, 2, -47, -55, -64, 4, 17, 65, 10, 16, 1, 24, 8, 0, 50, 49, 16, 1, -46, 1};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111100 11111111 11111111 11111111 11111111 11111011 11101111 11111111 11101101 11111111 11111101 11111111 11111111 11111111 11111111 11101111 11111111 111111}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -33, -9, -1, -73, -1, -65, -1, -1, -1, -1, -9, -1, 63};
  // {00000000 00000000 00000000 00000001 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00101000 00000000 00000000 00000000 00110000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, -128, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 20, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {...4 0-bits... 11111111 11111111 10110111 11111111 11111111 11111111 01101111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 10111110 11111111 11100111 11111111 11111111 11}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -19, -1, -1, -1, -10, -1, 127, -1, -1, -1, -1, -1, -17, -1, -1, 125, -1, -25, -1, -1, 63};
  // {00000000 00000000 00000100 00100000 00000000 00000000 00000000 00000000 01000000 00100000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00001000 00000010 00000000 01000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00001000 00000000 00000000 00010000 00000000 01000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 32, 4, 0, 0, 0, 0, 2, 4, 0, 0, 0, 0, 16, 0, 0, 0, 0, -128, 0, 0, 16, 64, 0, 2, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0, 16, 0, 0, 8, 0, 2, 0, 0, 0, 0, 0};
  // {11111111 11101111 11111111 10111111 11110111 11111111 11111111 10111111 11111111 11111111 11111111 11111110 11101111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 10111111 11011111 11111111 11}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -9, -1, -3, -17, -1, -1, -3, -1, -1, -1, 127, -9, 127, -1, -1, -1, -1, -1, -1, -3, -5, -1, 3};
  // {00000000 00000000 00000000 00000000 00000000 00001010 00000000 00000001 00000000 00000000 00000000 00010000 00000100 01000000 00000000 00000000 00000001 00000000 00000100 10000000 00000000 00000000 00000000 00}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 0, 0, 0, 80, 0, -128, 0, 0, 0, 8, 32, 2, 0, 0, -128, 0, 32, 1, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000010 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00010000 00000000 01000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, -128, 0, 0, 0, 64, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 8, 0, 2, 0, 0, 0, 0, 0};
}


class default_gbm_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_20_class_0.score0(fdata);
  }
}
class default_gbm_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
             (Double.isNaN(data[9]) || data[9 /* boat */] <1.0f ? 
                 (data[5 /* ticket */] <24903.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* parch */] <0.5f ? 
                        -0.06621626f : 
                        0.1474256f) : 
                     (Double.isNaN(data[8 /* embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                        -0.10073001f : 
                        -0.013047297f)) : 
                 (Double.isNaN(data[3]) || data[3 /* sibsp */] <0.5f ? 
                     (data[5 /* ticket */] <350088.5f ? 
                        0.10992438f : 
                        0.108878545f) : 
                    0.013432453f)) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 369, 0, data[11])) ? 
                 (Double.isNaN(data[2]) || data[2 /* age */] <24.331728f ? 
                    0.1462945f : 
                    0.0028341603f) : 
                0.14561635f)) : 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 369, 0, data[11])) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT5, 369, 0, data[11])) ? 
                 (Double.isNaN(data[6]) || data[6 /* fare */] <28.018003f ? 
                     (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(288, 71, data[11]) && !GenModel.bitSetContains(GRPSPLIT6, 288, 71, data[11])) ? 
                        -0.11246379f : 
                        -0.11020603f) : 
                    -0.0606102f) : 
                 (data[6 /* fare */] <8.005144f ? 
                     (data[6 /* fare */] <7.683655f ? 
                        0.24520425f : 
                        0.06777339f) : 
                     (Double.isNaN(data[0]) || data[0 /* pclass */] <2.5f ? 
                        0.11238826f : 
                        -0.010115577f))) : 
            0.1479516f));
    return pred;
  } // constant pool size = 309B, number of visited nodes = 17, static init size = 1434B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00000000 00000001 10010000 00000000 10000000 00000000 00000000 01000000 01000000 01000000 00000000 00000000 00000000 00000000 01101000 00000010 00000000 00000000 00000010 00100001 00000000 10000000 10000000 00000010 10000001 01001000 10010000 00000000 01000010 00000000 00010001 00000000 00000000 00001000 00000000 00010000 00000000 00000000 00001000 00010000 00000000 00001100 10001000 00001000 00000000 00000000 1}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -128, 9, 0, 1, 0, 0, 2, 2, 2, 0, 0, 0, 0, 22, 64, 0, 0, 64, -124, 0, 1, 1, 64, -127, 18, 9, 0, 66, 0, -120, 0, 0, 16, 0, 8, 0, 0, 16, 8, 0, 48, 17, 16, 0, 0, 1};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000001 00000000 10000000 00000000 00000010 00000000 01000000 00000000 00000000 01000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, -128, 0, 1, 0, 64, 0, 2, 0, 0, 2, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000100 00100000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00100101 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 01000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00001000 00000000 00000000 00010000 00000000 01000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 32, 4, 0, 0, 0, 0, 0, 4, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 2, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0, 16, 0, 0, 8, 0, 2, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 01111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10101111 11011111 01111111 11110111 11111111 11111111 11111011 11101101 11111111 11110111 11111011 11111111 11011111 11110111 11111111 11111111 11111111 11111111 11111110 11010111 01011111 11111101 11111111 11111101 11111111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, 127, -2, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -11, -5, -2, -17, -1, -1, -33, -73, -1, -17, -33, -1, -5, -17, -1, -1, -1, -1, 127, -21, -6, -65, -1, -65, -1, 1};
  // {...71 0-bits... 11000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00101000 00000000 01000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {3, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 2, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0};
}


class default_gbm_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_21_class_0.score0(fdata);
  }
}
class default_gbm_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
             (Double.isNaN(data[9]) || data[9 /* boat */] <1.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* age */] <7.602569f ? 
                     (data[5 /* ticket */] <49127.5f ? 
                        0.0312277f : 
                        -0.06938995f) : 
                     (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 366, 0, data[11])) ? 
                        -0.10984411f : 
                        -0.07952118f)) : 
                 (Double.isNaN(data[2]) || data[2 /* age */] <32.896828f ? 
                     (Double.isNaN(data[6]) || data[6 /* fare */] <16.010288f ? 
                        0.10854074f : 
                        0.11049002f) : 
                    0.030164462f)) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 369, 0, data[11])) ? 
                 (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(186, 0, data[7]) || (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT4, 186, 0, data[7])) ? 
                     (data[2 /* age */] <24.036482f ? 
                        0.14557774f : 
                        -0.08732329f) : 
                    0.14903592f) : 
                0.13968161f)) : 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT5, 369, 0, data[11])) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT6, 369, 0, data[11])) ? 
                 (data[5 /* ticket */] <242915.5f ? 
                    -0.08136181f : 
                    -0.11006506f) : 
                 (Double.isNaN(data[8 /* embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[8])) ? 
                     (Double.isNaN(data[9]) || data[9 /* boat */] <1.0f ? 
                        -0.034134552f : 
                        0.10841694f) : 
                     (Double.isNaN(data[2]) || data[2 /* age */] <15.769558f ? 
                        0.1311157f : 
                        0.05998131f))) : 
            0.14153418f));
    return pred;
  } // constant pool size = 344B, number of visited nodes = 17, static init size = 1644B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00000000 00000001 10010000 00000000 10000000 00000000 00000000 01000000 01000000 01000000 00000000 00000000 00000000 00000000 01101000 00000010 00000000 00000000 00000010 00100001 00000000 10000000 10000000 00000010 10000001 01001000 10010000 00000000 01000010 00000000 00010001 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00001000 00010000 00000000 00001100 10001000 00001000 00000000 00000000 1}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -128, 9, 0, 1, 0, 0, 2, 2, 2, 0, 0, 0, 0, 22, 64, 0, 0, 64, -124, 0, 1, 1, 64, -127, 18, 9, 0, 66, 0, -120, 0, 0, 16, 0, 0, 0, 0, 16, 8, 0, 48, 17, 16, 0, 0, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000010 00000000 01000000 00000000 00000000 01000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000100 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, -128, 0, 0, 0, 64, 0, 2, 0, 0, 2, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 32, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11110110 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11101111 11111111 11111111 11111111 11111101 11111111 11111111 11110111 11111111 11111111 11110111 11}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, 111, -1, -1, -1, -1, 127, -1, -1, -9, -1, -1, -1, -65, -1, -1, -17, -1, -1, -17, 3};
  // {00000000 00000000 00000100 00100000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00100101 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 01000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00001000 00000000 00000000 00010000 00000000 01000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 32, 4, 0, 0, 0, 0, 0, 4, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 2, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0, 16, 0, 0, 8, 0, 2, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 01111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10101111 11011111 01111111 11110111 11111111 11111111 11111011 11111101 11111111 11110111 11111011 11111111 11011111 11110111 11111111 11111111 11111111 11111111 11111110 11010111 01011111 11111101 11111111 11111101 11111111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, 127, -2, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -11, -5, -2, -17, -1, -1, -33, -65, -1, -17, -33, -1, -5, -17, -1, -1, -1, -1, 127, -21, -6, -65, -1, -65, -1, 1};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {3, 0, 0, 0};
}


class default_gbm_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_22_class_0.score0(fdata);
  }
}
class default_gbm_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
             (Double.isNaN(data[9]) || data[9 /* boat */] <1.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* age */] <7.602569f ? 
                     (Double.isNaN(data[4]) || data[4 /* parch */] <0.5f ? 
                        -0.049198847f : 
                        0.05587727f) : 
                     (Double.isNaN(data[5]) || data[5 /* ticket */] <339809.5f ? 
                        -0.10863934f : 
                        -0.06716714f)) : 
                 (data[5 /* ticket */] <85462.5f ? 
                    0.001497308f : 
                     (data[2 /* age */] <32.651707f ? 
                        0.10763077f : 
                        0.10832529f))) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 369, 0, data[11])) ? 
                 (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(186, 0, data[7]) || (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT3, 186, 0, data[7])) ? 
                     (data[2 /* age */] <24.036482f ? 
                        0.1409285f : 
                        -0.07013297f) : 
                    0.14369558f) : 
                0.13452189f)) : 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 369, 0, data[11])) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT5, 369, 0, data[11])) ? 
                 (data[3 /* sibsp */] <0.5f ? 
                    -0.038934324f : 
                    -0.1100657f) : 
                 (Double.isNaN(data[3]) || data[3 /* sibsp */] <2.5f ? 
                     (data[5 /* ticket */] <244708.5f ? 
                        0.10318412f : 
                        0.037932497f) : 
                    -0.095393494f)) : 
            0.13619387f));
    return pred;
  } // constant pool size = 288B, number of visited nodes = 16, static init size = 1332B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00000000 00000001 10010000 00000000 10000000 00000000 00000000 01000000 01000000 01000000 00000000 00000000 00000000 00000000 01101000 00000010 00000000 00000000 00000010 00100001 00000000 10000000 10000000 00000010 10000001 01001000 10010000 00000000 01000010 00000000 00010001 00000000 00000000 00001000 00000000 00010000 00000000 00000000 00001000 00010000 00000000 00001100 10001000 00001000 00000000 00000000 1}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -128, 9, 0, 1, 0, 0, 2, 2, 2, 0, 0, 0, 0, 22, 64, 0, 0, 64, -124, 0, 1, 1, 64, -127, 18, 9, 0, 66, 0, -120, 0, 0, 16, 0, 8, 0, 0, 16, 8, 0, 48, 17, 16, 0, 0, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000010 00000001 00000000 10000000 10000000 00000010 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 16, 0, 0, 0, 64, -128, 0, 1, 1, 64, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00000010 00000000 00100000 00000001 00001110 00000000 00000000 00000000 00000000 00000000 00010000 00000100 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 64, 0, 4, -128, 112, 0, 0, 0, 0, 0, 8, 32, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000100 00100000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00100101 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 01000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00001000 00000000 00000000 00010000 00000000 01000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 32, 4, 0, 0, 0, 0, 0, 4, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 2, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0, 16, 0, 0, 8, 0, 2, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 01111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10101111 11011111 01111111 11111111 11111111 11111111 11111011 11101101 11111111 11110111 11110011 11111111 11011111 11110111 11111111 11111111 11111111 11111111 11111110 11010111 01011111 11111101 11111111 11111101 11111111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, 127, -2, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -11, -5, -2, -1, -1, -1, -33, -73, -1, -17, -49, -1, -5, -17, -1, -1, -1, -1, 127, -21, -6, -65, -1, -65, -1, 1};
}


class default_gbm_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_23_class_0.score0(fdata);
  }
}
class default_gbm_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
             (Double.isNaN(data[9]) || data[9 /* boat */] <1.0f ? 
                 (data[5 /* ticket */] <24903.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* parch */] <0.5f ? 
                        -0.057798248f : 
                        0.12209578f) : 
                     (Double.isNaN(data[8 /* embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                        -0.09535156f : 
                        -1.203431E-4f)) : 
                 (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 366, 0, data[11])) ? 
                    -9.989075E-4f : 
                     (Double.isNaN(data[2]) || data[2 /* age */] <26.860699f ? 
                        0.10854683f : 
                        0.10675153f))) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 369, 0, data[11])) ? 
                 (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(186, 0, data[7]) || (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT5, 186, 0, data[7])) ? 
                     (Double.isNaN(data[2]) || data[2 /* age */] <24.036482f ? 
                        0.13088521f : 
                        -0.088605724f) : 
                    0.13854752f) : 
                0.13028628f)) : 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT6, 369, 0, data[11])) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT7, 369, 0, data[11])) ? 
                 (data[3 /* sibsp */] <0.5f ? 
                    -0.035944905f : 
                    -0.10716314f) : 
                 (Double.isNaN(data[8 /* embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                     (Double.isNaN(data[9]) || data[9 /* boat */] <1.0f ? 
                        -0.013294349f : 
                        0.10713383f) : 
                     (!Double.isNaN(data[9]) ? 
                        0.10721889f : 
                        0.11251174f))) : 
            0.13169879f));
    return pred;
  } // constant pool size = 347B, number of visited nodes = 17, static init size = 1674B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00000000 00000001 10010000 00000000 10000000 00000000 00000000 01000000 01000000 01000000 00000000 00000000 00000000 00000000 01101000 00000010 00000000 00000000 00000010 00100001 00000000 10000000 10000000 00000010 10000001 01001000 10010000 00000000 01000010 00000000 00010001 00000010 00000000 00001000 00000000 00010000 00000000 00000000 00001000 00010000 00000000 00001100 10001000 00001000 00000000 00000000 1}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -128, 9, 0, 1, 0, 0, 2, 2, 2, 0, 0, 0, 0, 22, 64, 0, 0, 64, -124, 0, 1, 1, 64, -127, 18, 9, 0, 66, 0, -120, 64, 0, 16, 0, 8, 0, 0, 16, 8, 0, 48, 17, 16, 0, 0, 1};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000001 00000000 10000000 00000000 00000010 00000000 01000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000100 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, -128, 0, 1, 0, 64, 0, 2, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 32, 0, 0, 0, 0, 0};
  // {00000010 00000000 00000000 00100000 00000001 00000110 00000000 00000001 00000000 00000000 00000000 00010000 00000100 00000000 00000000 00100000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00}
  public static final byte[] GRPSPLIT5 = new byte[] {64, 0, 0, 4, -128, 96, 0, -128, 0, 0, 0, 8, 32, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0};
  // {00000000 00000000 00000100 00100000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00100101 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 01000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00001000 00000000 00000000 00010000 00000000 01000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 32, 4, 0, 0, 0, 0, 0, 4, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 2, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0, 16, 0, 0, 8, 0, 2, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 01111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10101111 11011111 01111111 11110111 11111111 11111111 11111011 11111101 11111111 11110111 11110011 11111111 11011111 11110111 11111111 11111111 11111111 11111111 11111110 11010111 01011111 11111101 11111111 11111101 11111111 1}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, 127, -2, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -11, -5, -2, -17, -1, -1, -33, -65, -1, -17, -49, -1, -5, -17, -1, -1, -1, -1, 127, -21, -6, -65, -1, -65, -1, 1};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
}


class default_gbm_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_24_class_0.score0(fdata);
  }
}
class default_gbm_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
         (!Double.isNaN(data[9]) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 366, 0, data[11])) ? 
                -0.046065565f : 
                 (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(366, 0, data[11]) || (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 366, 0, data[11])) ? 
                     (Double.isNaN(data[4]) || data[4 /* parch */] <0.5f ? 
                        0.10631084f : 
                        0.106963f) : 
                    0.10962639f)) : 
            -0.04081707f) : 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 369, 0, data[11])) ? 
             (!Double.isNaN(data[7 /* cabin */]) && (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT4, 186, 0, data[7])) ? 
                -0.09407928f : 
                 (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(186, 0, data[7]) || (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT5, 186, 0, data[7])) ? 
                     (!Double.isNaN(data[1 /* sex */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                        0.019442543f : 
                        0.10754049f) : 
                    0.12931162f)) : 
            0.12668742f));
    return pred;
  } // constant pool size = 281B, number of visited nodes = 9, static init size = 1470B
  // {00000000 00000001 11010100 10100010 10110000 01000001 10010000 01000000 01100010 01110001 00000000 10011000 01100100 00010101 01101010 01100011 00000000 01000010 10000110 00110001 01100001 10000001 10001000 00001011 10000011 11011010 11010100 00010000 01000000 10001011 10000011 00000011 00100000 10001000 10000010 01010000 00001000 10000000 00011000 00010000 00000000 01001100 10001100 00001000 10000000 00001011 1}
  public static final byte[] GRPSPLIT0 = new byte[] {0, -128, 43, 69, 13, -126, 9, 2, 70, -114, 0, 25, 38, -88, 86, -58, 0, 66, 97, -116, -122, -127, 17, -48, -63, 91, 43, 8, 2, -47, -63, -64, 4, 17, 65, 10, 16, 1, 24, 8, 0, 50, 49, 16, 1, -48, 1};
  // {11111111 11111111 11111111 11111111 11111111 11111011 11111111 11111101 11111111 11111111 11111111 11111111 11111110 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111011 11111011 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -1, -1, -1, -33, -1, -65, -1, -1, -1, -1, 127, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -33, -1, -1, -1, -65, -1, -1, -1, -1, -1, -9, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, 63};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00101000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 010000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2};
  // {00000000 00000000 00000100 00100000 00000000 00000000 00000000 00000000 01000000 00100000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00001000 00000010 00000000 01000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00010000 00000000 01000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 32, 4, 0, 0, 0, 0, 2, 4, 0, 0, 0, 0, 16, 0, 0, 0, 0, -128, 0, 0, 16, 64, 0, 2, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 8, 0, 2, 0, 0, 0, 0, 0};
  // {11111111 11101111 11111111 10111111 11110111 11111111 11111101 10111111 11111111 11111111 11111111 11111110 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 11011111 11111111 11}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -9, -1, -3, -17, -1, -65, -3, -1, -1, -1, 127, -9, -1, -1, -1, -1, -1, -1, -1, -3, -5, -1, 3};
  // {00000000 00000000 00000000 00000000 00000000 00001010 00000000 00000000 00000000 00000000 00000000 00010000 00000100 01000000 00000000 00000000 01000001 00000000 00000100 10000000 00000000 00000000 00000000 00}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 8, 32, 2, 0, 0, -126, 0, 32, 1, 0, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
}


class default_gbm_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_25_class_0.score0(fdata);
  }
}
class default_gbm_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 369, 0, data[11])) ? 
                 (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 369, 0, data[11])) ? 
                    -0.1719679f : 
                     (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 369, 0, data[11])) ? 
                        -0.10836479f : 
                        -0.10655264f)) : 
                 (Double.isNaN(data[9]) || data[9 /* boat */] <1.0f ? 
                     (data[5 /* ticket */] <388731.5f ? 
                        -0.018178144f : 
                        -0.108111165f) : 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(216, 48, data[11]) || (GenModel.bitSetIsInRange(216, 48, data[11]) && !GenModel.bitSetContains(GRPSPLIT5, 216, 48, data[11])) ? 
                        0.10582652f : 
                        0.10864703f))) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT6, 369, 0, data[11])) ? 
                 (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(186, 0, data[7]) || (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT7, 186, 0, data[7])) ? 
                     (Double.isNaN(data[2]) || data[2 /* age */] <24.036482f ? 
                        0.12890574f : 
                        -0.08082551f) : 
                    0.1304334f) : 
                0.12355002f)) : 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT8, 369, 0, data[11])) ? 
             (data[6 /* fare */] <8.005144f ? 
                 (data[6 /* fare */] <7.683655f ? 
                    0.19389512f : 
                     (!Double.isNaN(data[2]) ? 
                        -0.049812585f : 
                        0.10980595f)) : 
                 (!Double.isNaN(data[9]) ? 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(365, 4, data[11]) || (GenModel.bitSetIsInRange(365, 4, data[11]) && !GenModel.bitSetContains(GRPSPLIT9, 365, 4, data[11])) ? 
                        0.1057214f : 
                        0.10831391f) : 
                    -0.029656237f)) : 
            0.1255566f));
    return pred;
  } // constant pool size = 459B, number of visited nodes = 17, static init size = 2358B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00000000 00000001 10010000 00000000 10000000 00000000 00000000 01000000 01000000 01000000 00000000 00000000 00000000 00000000 01101000 00000010 00000000 00000000 00000010 00100001 00000000 10000000 10000000 00000010 10000001 01001000 10010000 00000000 01000010 00000000 00010001 00000010 00000000 00001000 00000000 00010000 00000000 00000000 00001000 00010000 00000000 00001100 10001000 00001000 00000000 00000000 1}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -128, 9, 0, 1, 0, 0, 2, 2, 2, 0, 0, 0, 0, 22, 64, 0, 0, 64, -124, 0, 1, 1, 64, -127, 18, 9, 0, 66, 0, -120, 64, 0, 16, 0, 8, 0, 0, 16, 8, 0, 48, 17, 16, 0, 0, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00010000 00001000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 1, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 8, 16, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11101011 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10101111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011101 01011111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -5, -1, -1, -1, -1, -1, -1, -41, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -69, -6, -1, -1, -1, -1, 1};
  // {11101011 11110111 11111101 11111111 10111101 11111111 11111110 01111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 01111111 11111111 11110111 11101111 10111111 10011011 11111111 11111110 11111111 11111011 11111111 11111111 11110111 11011111 11111011 11011110 11111111 11110111 11111101 11111111 01011011 10101111 11111101 11111111 11111111 11111111 10111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-41, -17, -65, -1, -67, -1, 127, -66, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -2, -1, -17, -9, -3, -39, -1, 127, -1, -33, -1, -1, -17, -5, -33, 123, -1, -17, -65, -1, -38, -11, -65, -1, -1, -1, -3, 1};
  // {...48 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000001 00000000 10000000 00000000 00000010 00000000 01000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000100 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, -128, 0, 1, 0, 64, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 32, 0, 0, 0, 0, 0};
  // {00000010 00000010 00010000 00000000 00000001 00001010 00000000 00000001 00000000 00000000 00000000 00010000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00}
  public static final byte[] GRPSPLIT7 = new byte[] {64, 64, 8, 0, -128, 80, 0, -128, 0, 0, 0, 8, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000100 00100000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00100101 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 01000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00001000 00000000 00000000 00010000 00000000 01000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 32, 4, 0, 0, 0, 0, 0, 4, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 2, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0, 16, 0, 0, 8, 0, 2, 0, 0, 0, 0, 0};
  // {...4 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 10000000 00000000 00000000 00000001 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 0}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 1, 0, 0, -128, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0};
}


class default_gbm_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_26_class_0.score0(fdata);
  }
}
class default_gbm_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
         (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
            -0.11381231f : 
             (Double.isNaN(data[2]) || data[2 /* age */] <4.9930325f ? 
                -0.12363986f : 
                 (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(366, 0, data[11]) || (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 366, 0, data[11])) ? 
                     (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 366, 0, data[11])) ? 
                        -0.10721379f : 
                        -0.10596208f) : 
                    0.00327829f))) : 
         (!Double.isNaN(data[10]) ? 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(365, 4, data[11]) || (GenModel.bitSetIsInRange(365, 4, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 365, 4, data[11])) ? 
                 (data[6 /* fare */] <12.007715f ? 
                    -0.11154716f : 
                    -0.12990382f) : 
                -0.10630555f) : 
            0.030623134f));
    return pred;
  } // constant pool size = 269B, number of visited nodes = 8, static init size = 1422B
  // {01101000 00010111 11111100 11111111 10111001 01111101 11010010 01101111 11101010 01110001 00100111 10111110 01110110 10010111 11101111 11110111 01110110 11110011 10010110 00110111 01110111 10100101 10001111 00101111 10101111 11011110 11111100 00011011 11110111 11101111 11010011 11010011 11111011 10011000 11010110 11011001 11111111 11010100 10111111 01011110 10000001 01011101 11101101 00111000 10011000 01111011 1}
  public static final byte[] GRPSPLIT0 = new byte[] {22, -24, 63, -1, -99, -66, 75, -10, 87, -114, -28, 125, 110, -23, -9, -17, 110, -49, 105, -20, -18, -91, -15, -12, -11, 123, 63, -40, -17, -9, -53, -53, -33, 25, 107, -101, -1, 43, -3, 122, -127, -70, -73, 28, 25, -34, 1};
  // {11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11101011 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 01111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -5, -1, -1, -1, -1, -1, -1, -41, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -2, -1, -1, -1, -1, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000101 000001}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -96, 32};
  // {11101011 11110111 11111111 11111111 10111111 11111111 11111110 11111111 11111110 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 01111111 11111111 11100111 11001111 10111111 11111111 11111111 11111110 11111011 11111111 11111111 11110111 11111111 11111111 11011111 11111110 11111111 11111111 11111101 11111111 01111110 10001111 11011101 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-41, -17, -1, -1, -3, -1, 127, -1, 127, -2, -1, -1, -1, -1, -1, -1, -17, -1, -1, -2, -1, -25, -13, -3, -1, -1, 127, -33, -1, -1, -17, -1, -1, -5, 127, -1, -1, -65, -1, 126, -15, -69, -1, -1, -1, 63};
  // {...4 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31};
}


class default_gbm_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_27_class_0.score0(fdata);
  }
}
class default_gbm_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(186, 0, data[7]) || (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT1, 186, 0, data[7])) ? 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 369, 0, data[11])) ? 
                 (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 369, 0, data[11])) ? 
                    -0.16120064f : 
                     (Double.isNaN(data[9]) || data[9 /* boat */] <1.0f ? 
                        -0.05884135f : 
                        0.10518115f)) : 
                0.11755119f) : 
             (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(186, 0, data[7]) || (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT4, 186, 0, data[7])) ? 
                 (Double.isNaN(data[2]) || data[2 /* age */] <34.370136f ? 
                    0.11480449f : 
                    0.059002977f) : 
                0.12710103f)) : 
         (data[5 /* ticket */] <242915.5f ? 
             (data[6 /* fare */] <8.924137f ? 
                0.12963313f : 
                 (data[2 /* age */] <14.271484f ? 
                    0.1594655f : 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(348, 21, data[11]) || (GenModel.bitSetIsInRange(348, 21, data[11]) && !GenModel.bitSetContains(GRPSPLIT5, 348, 21, data[11])) ? 
                        0.028902208f : 
                        0.13065554f))) : 
             (!Double.isNaN(data[9]) ? 
                 (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(361, 4, data[11]) && !GenModel.bitSetContains(GRPSPLIT6, 361, 4, data[11])) ? 
                    0.10475933f : 
                     (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(184, 1, data[7]) || (GenModel.bitSetIsInRange(184, 1, data[7]) && !GenModel.bitSetContains(GRPSPLIT7, 184, 1, data[7])) ? 
                        0.10531762f : 
                        0.105798766f)) : 
                -0.023158874f)));
    return pred;
  } // constant pool size = 323B, number of visited nodes = 14, static init size = 1602B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00000010 00000010 00010100 00100000 00000001 01001110 00000000 00000001 00000000 01000001 00000000 10010000 00000110 00000000 00000010 00100000 01000011 00000101 00010101 11001000 00000000 00000000 00001000 00}
  public static final byte[] GRPSPLIT1 = new byte[] {64, 64, 40, 4, -128, 114, 0, -128, 0, -126, 0, 9, 96, 0, 64, 4, -62, -96, -88, 19, 0, 0, 16, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000010 00000001 00000000 10000000 10000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000100 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 16, 0, 0, 0, 64, -128, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 32, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 01011011 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011101 01111111 11111111 11110111 11111111 11111111 1}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -69, -2, -1, -17, -1, -1, 1};
  // {00000000 00000000 00000000 00000000 00000000 01000110 00000000 00000000 00000000 01000000 00000000 00010000 00000110 00000000 00000000 00000000 00000001 00000000 00000001 10000000 00000000 00000000 00000000 00}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 98, 0, 0, 0, 2, 0, 8, 96, 0, 0, 0, -128, 0, -128, 1, 0, 0, 0, 0};
  // {...21 0-bits... 10000100 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00000100 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00001000 00000000 00000000 00000010 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00001000 00000000 0000000}
  public static final byte[] GRPSPLIT5 = new byte[] {33, 0, 0, 0, 0, 0, 32, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 16, 0, 0, 64, -128, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0};
  // {...4 0-bits... 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111011 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11011111 11111111 11111111 11101111 11111111 11111111 11111111 11011111 11111111 11111110 11111111 11101111 11101111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -1, -17, -1, -33, -1, -1, -1, -1, -1, -1, -5, -1, -1, -5, -1, -1, -9, -1, -1, -1, -5, -1, 127, -1, -9, -9, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0};
  // {...1 0-bits... 00000000 00000000 00000000 00000000 00000100 00000001 00000100 00000000 00000000 00000000 00000000 00000000 00000000 01000100 00000000 00000000 00000000 00000000 00000100 00000000 01010000 00000000 0000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 0, 0, 32, -128, 32, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 32, 0, 10, 0, -128};
}


class default_gbm_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_28_class_0.score0(fdata);
  }
}
class default_gbm_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(186, 0, data[7]) || (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT1, 186, 0, data[7])) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 369, 0, data[11])) ? 
                 (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 369, 0, data[11])) ? 
                    -0.15712656f : 
                     (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 369, 0, data[11])) ? 
                        -0.10396251f : 
                        -0.10324385f)) : 
                 (Double.isNaN(data[6]) || data[6 /* fare */] <50.03215f ? 
                     (Double.isNaN(data[4]) || data[4 /* parch */] <0.5f ? 
                        -0.035755854f : 
                        0.047574043f) : 
                    0.10457847f)) : 
             (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(186, 0, data[7]) || (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT5, 186, 0, data[7])) ? 
                 (!Double.isNaN(data[7 /* cabin */]) && (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT6, 186, 0, data[7])) ? 
                    0.10454005f : 
                    0.10671289f) : 
                0.12415276f)) : 
         (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT7, 369, 0, data[11])) ? 
             (data[6 /* fare */] <14.009002f ? 
                -0.02584262f : 
                 (Double.isNaN(data[6]) || data[6 /* fare */] <27.97801f ? 
                    -0.12497438f : 
                    -0.049503982f)) : 
             (data[5 /* ticket */] <242915.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* age */] <14.271484f ? 
                     (Double.isNaN(data[6]) || data[6 /* fare */] <23.210938f ? 
                        0.14679009f : 
                        0.0114758685f) : 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(348, 21, data[11]) || (GenModel.bitSetIsInRange(348, 21, data[11]) && !GenModel.bitSetContains(GRPSPLIT8, 348, 21, data[11])) ? 
                        0.04149921f : 
                        0.13029653f)) : 
                 (!Double.isNaN(data[9]) ? 
                     (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(361, 4, data[11]) && !GenModel.bitSetContains(GRPSPLIT9, 361, 4, data[11])) ? 
                        0.10428635f : 
                        0.10484996f) : 
                    -0.01007666f))));
    return pred;
  } // constant pool size = 436B, number of visited nodes = 18, static init size = 2184B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00000010 00000010 00010100 00100000 00000001 01001110 00000000 00000001 00000000 01000001 00000000 10010000 00000110 00000000 00000010 00100000 01000011 00000101 00010101 11001000 00000000 00000000 00000000 00}
  public static final byte[] GRPSPLIT1 = new byte[] {64, 64, 40, 4, -128, 114, 0, -128, 0, -126, 0, 9, 96, 0, 64, 4, -62, -96, -88, 19, 0, 0, 0, 0};
  // {00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 01000000 00000001 00000000 00000000 00000000 00000000 01101000 00000010 00000000 00000000 00000010 00000001 00000000 10000000 10000000 00000000 00000001 00001000 00010000 00000000 01000000 00000000 00010001 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00001100 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 1, 0, 0, 0, 0, 0, 2, -128, 0, 0, 0, 0, 22, 64, 0, 0, 64, -128, 0, 1, 1, 0, -128, 16, 8, 0, 2, 0, -120, 0, 0, 16, 0, 0, 0, 0, 0, 8, 0, 48, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 10111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 01011111 11111111 11110111 11111111 11111111 1}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -5, -1, -3, -1, -1, -2, -1, -1, -1, -1, -1, -1, -17, -5, -1, -1, -1, -1, -1, -1, -1, -65, -6, -1, -17, -1, -1, 1};
  // {11100011 11010111 11111101 11111110 10111101 11011111 11111110 01111101 11101011 11111111 11111111 11111011 11011111 01111111 11111111 11111111 11110111 11111111 11111111 01111111 11101111 11100111 11101111 10111111 10011011 11111111 11111110 11111111 11101011 11110111 11111111 11111101 11101111 11111011 11011110 11101111 11100101 11111101 11111101 01011011 10001111 11111101 11111111 11101111 11111111 10111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-57, -21, -65, 127, -67, -5, 127, -66, -41, -1, -1, -33, -5, -2, -1, -1, -17, -1, -1, -2, -9, -25, -9, -3, -39, -1, 127, -1, -41, -17, -1, -65, -9, -33, 123, -9, -89, -65, -65, -38, -15, -65, -1, -9, -1, -3, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 01000000 00000000 00010000 00000110 00000000 00000000 00100000 00000001 00000000 00000101 10000000 00000000 00000000 00000000 00}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, 64, 0, 0, 0, 2, 0, 8, 96, 0, 0, 4, -128, 0, -96, 1, 0, 0, 0, 0};
  // {00000010 00000010 00010000 00100000 00000001 01001100 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 64, 8, 4, -128, 50, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 01111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10101111 11011111 01111111 11110111 11111111 11111111 11111011 11101101 11111111 11110111 11110011 11111111 11011111 11110111 11111111 11111111 11111111 11111111 11111110 11010111 01011111 11111101 11111111 11111101 11111111 1}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, 127, -2, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -11, -5, -2, -17, -1, -1, -33, -73, -1, -17, -49, -1, -5, -17, -1, -1, -1, -1, 127, -21, -6, -65, -1, -65, -1, 1};
  // {...21 0-bits... 10000100 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00000100 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00001000 00000000 0000000}
  public static final byte[] GRPSPLIT8 = new byte[] {33, 0, 0, 0, 0, 0, 32, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0};
  // {...4 0-bits... 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111011 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11011111 11111111 11111111 11101111 11111111 11111111 11111111 11011111 11111111 11111110 11111111 11101111 11101111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -1, -1, -1, -1, -17, -1, -33, -1, -1, -1, -1, -1, -1, -5, -1, -1, -5, -1, -1, -9, -1, -1, -1, -5, -1, 127, -1, -9, -9, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0};
}


class default_gbm_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_29_class_0.score0(fdata);
  }
}
class default_gbm_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[9]) ? 
         (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
            -0.087985344f : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
                 (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(185, 1, data[7]) || (GenModel.bitSetIsInRange(185, 1, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 185, 1, data[7])) ? 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 369, 0, data[11])) ? 
                        0.10427837f : 
                        0.10520781f) : 
                     (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
                        0.10512969f : 
                        0.106327154f)) : 
                0.10755846f)) : 
        -0.021222599f);
    return pred;
  } // constant pool size = 198B, number of visited nodes = 6, static init size = 1044B
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 10111111 11111111 11111111 11011110 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11101111 11111111 11111101 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -3, -3, -1, -1, 123, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -9, -1, -65, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, 1};
  // {00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 10000000 10000000 00000000 00001000 00000000 00000000 00000000 01010000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 10000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 1, 1, 0, 16, 0, 0, 0, 10, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0};
  // {...1 0-bits... 00000100 00000100 00100001 01000000 00000010 00010000 00000100 00000000 00000000 00000001 00000000 00000000 00000110 01000000 00000000 01000000 10010010 00000000 00001001 00000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {32, 32, -124, 2, 64, 8, 32, 0, 0, -128, 0, 0, 96, 2, 0, 2, 73, 0, -112, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00000010 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00010000 00000000 00010010 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 32, 0, 0, 64, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 32, 8, 0, 72, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
}


class default_gbm_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_30_class_0.score0(fdata);
  }
}
class default_gbm_Tree_30_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
         (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
            -0.099355705f : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 369, 0, data[11])) ? 
                 (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 369, 0, data[11])) ? 
                     (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 369, 0, data[11])) ? 
                        -0.10587529f : 
                        -0.10535978f) : 
                     (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT5, 369, 0, data[11])) ? 
                        -0.10482017f : 
                        -0.10436949f)) : 
                -0.03731169f)) : 
         (!Double.isNaN(data[10]) ? 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(365, 4, data[11]) || (GenModel.bitSetIsInRange(365, 4, data[11]) && !GenModel.bitSetContains(GRPSPLIT6, 365, 4, data[11])) ? 
                 (data[6 /* fare */] <12.007715f ? 
                    -0.10951597f : 
                    -0.12982102f) : 
                -0.10487296f) : 
            0.027126534f));
    return pred;
  } // constant pool size = 371B, number of visited nodes = 9, static init size = 2010B
  // {00001000 00000001 11010100 10100011 10110000 01100101 10010000 01000010 01100010 01110001 00000000 10011100 01100100 00010101 01101010 01100011 00000000 01000010 10000110 00110001 01110001 10000001 10001000 00001111 10100111 11011010 11010100 00010000 01110101 10001011 10010011 00001011 00110001 10001000 10010010 01010000 00011010 10000000 00011010 00010100 00000000 01001100 10001100 00011000 10000000 01001011 1}
  public static final byte[] GRPSPLIT0 = new byte[] {16, -128, 43, -59, 13, -90, 9, 66, 70, -114, 0, 57, 38, -88, 86, -58, 0, 66, 97, -116, -114, -127, 17, -16, -27, 91, 43, 8, -82, -47, -55, -48, -116, 17, 73, 10, 88, 1, 88, 40, 0, 50, 49, 24, 1, -46, 1};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 01011111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -3, -5, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -6, -1, -1, -1, -1, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 64, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11101011 11010111 11111101 11111111 10111101 11111111 11111110 01111111 11101010 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 01111111 11111111 11100111 11101111 00111111 10111111 11111111 11111110 11111011 11111111 11111111 11111111 11111011 11111111 11011111 11011110 11111111 11111111 11111101 11111111 01011110 10001111 11111101 11111101 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT3 = new byte[] {-41, -21, -65, -1, -67, -1, 127, -2, 87, -2, -1, -1, -1, -1, -1, -1, -17, -1, -1, -2, -1, -25, -9, -4, -3, -1, 127, -33, -1, -1, -1, -33, -1, -5, 123, -1, -1, -65, -1, 122, -15, -65, -65, -1, -1, -1, 1};
  // {11111111 11011111 11111101 11111111 11111101 11111111 11111111 01111111 11101010 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 10111111 11111111 11111111 11111011 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11011110 11011111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -5, -65, -1, -65, -1, -1, -2, 87, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -3, -1, -1, -33, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, 123, -5, -1, -1, -1, -1, -1, 1};
  // {11111111 01111111 11111111 11111111 11111011 11111111 11111111 11111111 11111111 11111111 11110111 11111110 01111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11011111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 00111011 11111000 01111011 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -2, -1, -1, -33, -1, -1, -1, -1, -1, -17, 127, -2, -1, -1, -1, -1, -17, -1, -1, -1, -65, -1, -1, -1, -5, -65, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -17, -1, -1, -36, 31, -34, 1};
  // {...4 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31};
}


class default_gbm_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_31_class_0.score0(fdata);
  }
}
class default_gbm_Tree_31_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[5 /* ticket */] <3707.5f ? 
         (Double.isNaN(data[6]) || data[6 /* fare */] <15.0096445f ? 
             (Double.isNaN(data[6]) || data[6 /* fare */] <8.614021f ? 
                 (data[5 /* ticket */] <2647.5f ? 
                    -0.05483808f : 
                    0.019220755f) : 
                -0.07233569f) : 
             (data[4 /* parch */] <0.5f ? 
                0.10090256f : 
                0.20420383f)) : 
         (!Double.isNaN(data[9]) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
                -0.07430105f : 
                 (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
                     (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(185, 1, data[7]) || (GenModel.bitSetIsInRange(185, 1, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 185, 1, data[7])) ? 
                        0.103812516f : 
                        0.10504172f) : 
                    0.10674346f)) : 
            -0.038745873f));
    return pred;
  } // constant pool size = 157B, number of visited nodes = 9, static init size = 726B
  // {11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 10111111 10111111 11111111 11111111 11011110 11111111 11011111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -2, -1, -1, -1, -1, -1, -3, -3, -1, -1, 123, -1, -5, -1, -1, -1, -1, -5, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
  // {00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 10000000 10000000 00000000 00001000 00000000 00000000 00000000 01010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 10000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 1, 1, 0, 16, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0};
  // {...1 0-bits... 00000100 00000100 00100001 01000000 00000010 00010000 00000100 00000000 00000000 00000001 00000000 00000000 00000110 01000000 00000000 01000000 10011010 00000000 00001001 00000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {32, 32, -124, 2, 64, 8, 32, 0, 0, -128, 0, 0, 96, 2, 0, 2, 89, 0, -112, 0, 0, 0, 0, 0};
}


class default_gbm_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_32_class_0.score0(fdata);
  }
}
class default_gbm_Tree_32_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
         (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 369, 0, data[11])) ? 
                -0.15137202f : 
                 (Double.isNaN(data[9]) || data[9 /* boat */] <1.0f ? 
                     (Double.isNaN(data[2]) || data[2 /* age */] <7.3151345f ? 
                        -0.0028941394f : 
                        -0.08086576f) : 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(366, 0, data[11]) || (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 366, 0, data[11])) ? 
                        0.10362634f : 
                        0.10506805f))) : 
             (data[6 /* fare */] <8.005144f ? 
                 (data[6 /* fare */] <7.6831837f ? 
                    0.17189068f : 
                     (!Double.isNaN(data[2]) ? 
                        -0.05396834f : 
                        0.09199544f)) : 
                 (Double.isNaN(data[8 /* embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(358, 4, data[11]) || (GenModel.bitSetIsInRange(358, 4, data[11]) && !GenModel.bitSetContains(GRPSPLIT5, 358, 4, data[11])) ? 
                        -0.081218444f : 
                        0.11236286f) : 
                     (Double.isNaN(data[2]) || data[2 /* age */] <15.75f ? 
                        0.08660168f : 
                        0.026238652f)))) : 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT6, 369, 0, data[11])) ? 
             (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(186, 0, data[7]) || (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT7, 186, 0, data[7])) ? 
                 (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT8, 369, 0, data[11])) ? 
                    -0.0485628f : 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT9, 369, 0, data[11])) ? 
                        0.08322692f : 
                        0.091492854f)) : 
                0.12289731f) : 
            0.11740626f));
    return pred;
  } // constant pool size = 432B, number of visited nodes = 16, static init size = 2208B
  // {00000000 00000001 11010100 10100010 10110000 01000001 00010000 01000000 01100010 01110000 00000000 10011000 01100100 00010101 01101010 01100001 00000000 01000010 10000110 00110001 01100001 10000001 10001000 00001011 10000011 11011010 11010100 00010000 01000000 10000011 10010011 00000011 00000000 10001000 10000010 01000000 00001000 10000000 00011000 00010000 00000000 01001100 10001100 00001000 10000000 00001011 1}
  public static final byte[] GRPSPLIT0 = new byte[] {0, -128, 43, 69, 13, -126, 8, 2, 70, 14, 0, 25, 38, -88, 86, -122, 0, 66, 97, -116, -122, -127, 17, -48, -63, 91, 43, 8, 2, -63, -55, -64, 0, 17, 65, 2, 16, 1, 24, 8, 0, 50, 49, 16, 1, -48, 1};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011011 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 01111111 11111111 11111111 11111111 10111111 1}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -37, -1, -1, -1, -1, -1, -1, -17, -5, -1, -1, -1, -1, -1, -1, -1, -65, -2, -1, -1, -1, -3, 1};
  // {11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {3, 0, 0, 0};
  // {...4 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11110111 11111111 11111111 11111111 11111111 11111110 11011111 11111111 01111111 10111111 11111101 11111111 01111111 11111111 11111111 11111111 11111111 11101101 01111111 11111111 11011111 11111111 11}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -17, -1, -1, -1, -1, 127, -5, -1, -2, -3, -65, -1, -2, -1, -1, -1, -1, -73, -2, -1, -5, -1, 59};
  // {00000000 00000000 00000100 00100000 00000000 00000000 00000000 00000000 01000000 00100000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00001000 00000010 00000000 01000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00010000 00000000 01000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 32, 4, 0, 0, 0, 0, 2, 4, 0, 0, 0, 0, 16, 0, 0, 0, 0, -128, 0, 0, 16, 64, 0, 2, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 8, 0, 2, 0, 0, 0, 0, 0};
  // {00000010 00000000 00010000 00000000 00000000 00001010 00000000 00000001 00000000 00000000 00000000 00010000 00000100 00000000 00000000 00100000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00}
  public static final byte[] GRPSPLIT7 = new byte[] {64, 0, 8, 0, 0, 80, 0, -128, 0, 0, 0, 8, 32, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 1}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 10000000 10000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 64, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0};
}


class default_gbm_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_33_class_0.score0(fdata);
  }
}
class default_gbm_Tree_33_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
         (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 369, 0, data[11])) ? 
                 (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 369, 0, data[11])) ? 
                    -0.14764291f : 
                     (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 369, 0, data[11])) ? 
                        -0.104627356f : 
                        -0.10355995f)) : 
                 (Double.isNaN(data[3]) || data[3 /* sibsp */] <1.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* parch */] <0.5f ? 
                        -0.027282218f : 
                        0.104239106f) : 
                     (data[6 /* fare */] <24.01543f ? 
                        -0.09419258f : 
                        -0.11577098f))) : 
             (data[6 /* fare */] <8.005144f ? 
                 (data[6 /* fare */] <7.6831837f ? 
                    0.15169913f : 
                     (!Double.isNaN(data[2]) ? 
                        -0.049897347f : 
                        0.081189364f)) : 
                 (Double.isNaN(data[8 /* embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[8])) ? 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(358, 4, data[11]) || (GenModel.bitSetIsInRange(358, 4, data[11]) && !GenModel.bitSetContains(GRPSPLIT6, 358, 4, data[11])) ? 
                        -0.076451026f : 
                        0.11102092f) : 
                     (Double.isNaN(data[2]) || data[2 /* age */] <15.75f ? 
                        0.07851927f : 
                        0.023821708f)))) : 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT7, 369, 0, data[11])) ? 
             (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(186, 0, data[7]) || (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT8, 186, 0, data[7])) ? 
                 (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT9, 369, 0, data[11])) ? 
                    -0.027258098f : 
                     (Double.isNaN(data[2]) || data[2 /* age */] <48.83725f ? 
                        0.10603195f : 
                        5.919087E-4f)) : 
                0.120514646f) : 
            0.1154972f));
    return pred;
  } // constant pool size = 441B, number of visited nodes = 18, static init size = 2214B
  // {00000000 00000001 11010100 10100010 10110000 01000001 00010000 01000000 01100010 01110000 00000000 10011000 01100100 00010101 01101010 01100011 00000000 01000010 10000110 00110001 01100001 10000001 10001000 00001011 10000011 11011010 11010100 00010000 01000000 10000011 10000011 00000011 00000000 10001000 10000010 01000000 00001000 10000000 00011000 00010000 00000000 01001100 10001100 00001000 10000000 00001011 1}
  public static final byte[] GRPSPLIT0 = new byte[] {0, -128, 43, 69, 13, -126, 8, 2, 70, 14, 0, 25, 38, -88, 86, -58, 0, 66, 97, -116, -122, -127, 17, -48, -63, 91, 43, 8, 2, -63, -63, -64, 0, 17, 65, 2, 16, 1, 24, 8, 0, 50, 49, 16, 1, -48, 1};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00010010 00001000 00010000 00000000 00000001 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 1, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 72, 16, 8, 0, -128, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011101 01011111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -5, -1, -1, -1, -1, -1, -1, -17, -5, -1, -1, -1, -1, -1, -1, -1, -69, -6, -1, -1, -1, -1, 1};
  // {11100011 11010111 11111101 11111110 10111101 11011111 11111110 01111111 11101011 11111111 11111111 11111011 11111111 01111111 11111111 11111111 11110111 11111111 11111111 01111111 11101111 11100101 11101111 10111111 10111011 11011111 11111110 11111111 11111011 11111111 11111111 11111111 11101111 11111011 11011110 11111111 11101101 11111101 11111101 01011011 10101111 11111101 11111111 11101111 11111111 10111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-57, -21, -65, 127, -67, -5, 127, -2, -41, -1, -1, -33, -1, -2, -1, -1, -17, -1, -1, -2, -9, -89, -9, -3, -35, -5, 127, -1, -33, -1, -1, -1, -9, -33, 123, -1, -73, -65, -65, -38, -11, -65, -1, -9, -1, -3, 1};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {3, 0, 0, 0};
  // {...4 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11110111 11111111 01111111 11111111 11111111 11111111 11011111 11111111 01111111 10111111 11111101 11111111 01111111 11111111 11111111 11111111 11111111 11101101 01111111 11111111 11011111 11111111 11}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -17, -1, -2, -1, -1, -1, -5, -1, -2, -3, -65, -1, -2, -1, -1, -1, -1, -73, -2, -1, -5, -1, 59};
  // {00000000 00000000 00000100 00100000 00000000 00000000 00000000 00000000 01000000 00100000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00001000 00000010 00000000 01000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00010000 00000000 01000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 32, 4, 0, 0, 0, 0, 2, 4, 0, 0, 0, 0, 16, 0, 0, 0, 0, -128, 0, 0, 16, 64, 0, 2, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 8, 0, 2, 0, 0, 0, 0, 0};
  // {00000010 00000000 00010000 00100000 00000000 00000010 00000000 00000001 00000000 00000000 00000000 10010000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00}
  public static final byte[] GRPSPLIT8 = new byte[] {64, 0, 8, 4, 0, 64, 0, -128, 0, 0, 0, 9, 32, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -5, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, 1};
}


class default_gbm_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_34_class_0.score0(fdata);
  }
}
class default_gbm_Tree_34_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
         (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
            -0.08560905f : 
             (Double.isNaN(data[2]) || data[2 /* age */] <0.5643236f ? 
                -0.12585765f : 
                 (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(366, 0, data[11]) || (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 366, 0, data[11])) ? 
                     (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 366, 0, data[11])) ? 
                        -0.10405621f : 
                        -0.10324814f) : 
                    0.0064728432f))) : 
         (!Double.isNaN(data[10]) ? 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(365, 4, data[11]) || (GenModel.bitSetIsInRange(365, 4, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 365, 4, data[11])) ? 
                 (data[5 /* ticket */] <340292.5f ? 
                    -0.13571358f : 
                    -0.1084259f) : 
                -0.10386758f) : 
            0.023542138f));
    return pred;
  } // constant pool size = 269B, number of visited nodes = 8, static init size = 1422B
  // {00001000 00000001 11010100 10100011 10110000 01100101 10010000 01000010 01100010 01110001 00000000 10011100 01100100 10010101 01101010 01100011 00000000 01000010 10000110 00110001 01110001 10000001 10001000 00001111 10100111 11011010 11010100 00010000 01110101 10001011 10010011 00000011 00110001 10001000 10000010 01010000 00011010 10000000 00011010 00010100 00000000 01001100 10001100 00011000 10000000 01001011 1}
  public static final byte[] GRPSPLIT0 = new byte[] {16, -128, 43, -59, 13, -90, 9, 66, 70, -114, 0, 57, 38, -87, 86, -58, 0, 66, 97, -116, -114, -127, 17, -16, -27, 91, 43, 8, -82, -47, -55, -64, -116, 17, 65, 10, 88, 1, 88, 40, 0, 50, 49, 24, 1, -46, 1};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 01011111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -6, -1, -1, -1, -1, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000010 00000000 00000000 00001000 00000000 00000100 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 64, 0, 0, 16, 0, 32, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11101011 11010111 11111111 11111111 10111111 11111111 11111110 11111111 11101010 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 01111111 11111111 11100101 11001111 00111111 11111111 11011111 11111110 11111011 11111111 11111111 11110111 11111011 11111111 11011111 11111110 11111111 11111111 11111101 11111111 01111110 10000111 11111101 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-41, -21, -1, -1, -3, -1, 127, -1, 87, -2, -1, -1, -1, -1, -1, -1, -17, -1, -1, -2, -1, -89, -13, -4, -1, -5, 127, -33, -1, -1, -17, -33, -1, -5, 127, -1, -1, -65, -1, 126, -31, -65, -1, -1, -1, 63};
  // {...4 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31};
}


class default_gbm_Forest_35 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_35_class_0.score0(fdata);
  }
}
class default_gbm_Tree_35_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[5 /* ticket */] <3707.5f ? 
         (Double.isNaN(data[6]) || data[6 /* fare */] <15.0096445f ? 
             (Double.isNaN(data[6]) || data[6 /* fare */] <8.614021f ? 
                 (data[5 /* ticket */] <2647.5f ? 
                    -0.057925157f : 
                    0.011628054f) : 
                -0.0761112f) : 
             (Double.isNaN(data[2]) || data[2 /* age */] <0.5408861f ? 
                0.18931717f : 
                0.104839146f)) : 
         (!Double.isNaN(data[9]) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
                -0.06682513f : 
                 (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
                     (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(185, 1, data[7]) || (GenModel.bitSetIsInRange(185, 1, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 185, 1, data[7])) ? 
                        0.1030092f : 
                        0.10384308f) : 
                    0.10552475f)) : 
            -0.033870615f));
    return pred;
  } // constant pool size = 157B, number of visited nodes = 9, static init size = 726B
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 10111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111011 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11101111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11110111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -3, -3, -1, -1, 127, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -17, -9, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -17, -1, -1, -1, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 10000000 10000000 00000000 00001000 00000000 00000000 00000000 01010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 1, 1, 0, 16, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0};
  // {...1 0-bits... 10000100 00000000 00100001 00000000 10000010 00001000 00010110 00000010 00000000 00000001 00000001 00000000 00000110 01000000 00010000 00100010 10011010 00000000 00001101 10000000 00000000 00000000 00000001}
  public static final byte[] GRPSPLIT2 = new byte[] {33, 0, -124, 0, 65, 16, 104, 64, 0, -128, -128, 0, 96, 2, 8, 68, 89, 0, -80, 1, 0, 0, -128, 0};
}


class default_gbm_Forest_36 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_36_class_0.score0(fdata);
  }
}
class default_gbm_Tree_36_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 369, 0, data[11])) ? 
                -0.13909625f : 
                 (Double.isNaN(data[9]) || data[9 /* boat */] <1.0f ? 
                     (Double.isNaN(data[2]) || data[2 /* age */] <7.3151345f ? 
                        -1.9715155E-5f : 
                        -0.079256535f) : 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(366, 0, data[11]) || (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 366, 0, data[11])) ? 
                        0.103043415f : 
                        0.104067296f))) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 369, 0, data[11])) ? 
                 (Double.isNaN(data[2]) || data[2 /* age */] <24.331728f ? 
                    0.12633969f : 
                    -0.016184377f) : 
                0.11343492f)) : 
         (data[6 /* fare */] <8.005144f ? 
             (Double.isNaN(data[8 /* embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[8])) ? 
                 (Double.isNaN(data[2]) || data[2 /* age */] <8.098633f ? 
                    0.053816795f : 
                    -0.094514854f) : 
                 (data[6 /* fare */] <7.7001414f ? 
                    0.18332188f : 
                    0.055779915f)) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(365, 4, data[11]) || (GenModel.bitSetIsInRange(365, 4, data[11]) && !GenModel.bitSetContains(GRPSPLIT6, 365, 4, data[11])) ? 
                 (Double.isNaN(data[8 /* embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[8])) ? 
                     (Double.isNaN(data[9]) || data[9 /* boat */] <1.0f ? 
                        -0.08835176f : 
                        0.1042825f) : 
                     (Double.isNaN(data[4]) || data[4 /* parch */] <0.5f ? 
                        0.0012073052f : 
                        0.10419068f)) : 
                 (!Double.isNaN(data[9]) ? 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(365, 4, data[11]) || (GenModel.bitSetIsInRange(365, 4, data[11]) && !GenModel.bitSetContains(GRPSPLIT8, 365, 4, data[11])) ? 
                        0.10249252f : 
                        0.10328186f) : 
                    0.109571055f))));
    return pred;
  } // constant pool size = 372B, number of visited nodes = 18, static init size = 1800B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00000000 00000001 10010000 00000000 10000000 00000000 00000000 01000000 01000000 01000000 00000000 00000000 00000000 00000000 01101000 00000010 00000000 00000000 00000010 00100001 00000000 10000000 10000000 00000010 10000001 01001000 10010000 00000000 01000010 00000000 00000001 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00001000 00010000 00000000 00001100 10001000 00001000 00000000 00000000 1}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -128, 9, 0, 1, 0, 0, 2, 2, 2, 0, 0, 0, 0, 22, 64, 0, 0, 64, -124, 0, 1, 1, 64, -127, 18, 9, 0, 66, 0, -128, 0, 0, 16, 0, 0, 0, 0, 16, 8, 0, 48, 17, 16, 0, 0, 1};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11011110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011011 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11011111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111101 01111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, 123, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -37, -1, -1, -1, -1, -1, -1, -17, -5, -1, -1, -1, -17, -1, -1, -1, -65, -2, -1, -1, -1, -1, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00010000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 8, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000010 00000000 01000000 00000000 00000000 01000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000100 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, -128, 0, 0, 0, 64, 0, 2, 0, 0, 2, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 32, 0, 0, 0, 0, 0};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {5, 0, 0, 0};
  // {...4 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111101 11110111 11111111 01111111 11111111 11111111 11111110 11011111 11111111 01111111 00111111 11111101 11111111 01111111 11111111 11111111 11111111 11111111 11101101 01110101 11111111 11011111 11111111 11011111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -65, -17, -1, -2, -1, -1, 127, -5, -1, -2, -4, -65, -1, -2, -1, -1, -1, -1, -73, -82, -1, -5, -1, -5, 31};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {3, 0, 0, 0};
  // {...4 0-bits... 00000000 00001000 00000000 00000000 00000000 00010000 00000000 00100000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00010000 01000001 00000000 00000001 00000000 00000000 00100000 00000000 00000000 00000000 10000000 00000000 00000100 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 16, 0, 0, 0, 8, 0, 4, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 8, -126, 0, -128, 0, 0, 4, 0, 0, 0, 1, 0, 32, 0};
}


class default_gbm_Forest_37 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_37_class_0.score0(fdata);
  }
}
class default_gbm_Tree_37_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(186, 0, data[7]) || (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT0, 186, 0, data[7])) ? 
         (!Double.isNaN(data[9]) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
                -0.06722516f : 
                 (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 369, 0, data[11])) ? 
                     (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(185, 1, data[7]) || (GenModel.bitSetIsInRange(185, 1, data[7]) && !GenModel.bitSetContains(GRPSPLIT3, 185, 1, data[7])) ? 
                        0.102504596f : 
                        0.103126355f) : 
                    0.10424072f)) : 
            -0.019519193f) : 
        0.11428311f);
    return pred;
  } // constant pool size = 166B, number of visited nodes = 5, static init size = 876B
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000100 00000000 01000000 00000000 00010000 00000100 01000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 01000000 00}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 0, 0, 64, 0, 32, 0, 2, 0, 8, 32, 2, 0, 0, 0, 0, -128, 0, 0, 0, 2, 0};
  // {11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11011111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111101 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT1 = new byte[] {-17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -5, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -65, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
  // {00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 10000000 10000000 00000000 00001000 00000000 00000000 00000000 01010000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 10000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 64, 0, 0, 1, 1, 0, 16, 0, 0, 0, 10, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0};
  // {...1 0-bits... 10000100 00000000 00100001 01000000 10000010 00010000 00010110 00000001 00000000 00100001 00000001 00000000 00000100 01000000 00010000 01100010 10011010 00000000 00001101 10001011 00000000 00000000 00000001}
  public static final byte[] GRPSPLIT3 = new byte[] {33, 0, -124, 2, 65, 8, 104, -128, 0, -124, -128, 0, 32, 2, 8, 70, 89, 0, -80, -47, 0, 0, -128, 0};
}


class default_gbm_Forest_38 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_38_class_0.score0(fdata);
  }
}
class default_gbm_Tree_38_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[5 /* ticket */] <3707.5f ? 
         (Double.isNaN(data[6]) || data[6 /* fare */] <15.0096445f ? 
             (Double.isNaN(data[6]) || data[6 /* fare */] <8.614021f ? 
                 (data[5 /* ticket */] <2647.5f ? 
                    -0.05816019f : 
                    0.009714174f) : 
                -0.06769877f) : 
             (Double.isNaN(data[2]) || data[2 /* age */] <0.5408861f ? 
                0.16473919f : 
                0.09671257f)) : 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
             (!Double.isNaN(data[9]) ? 
                 (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
                    -0.06040645f : 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 369, 0, data[11])) ? 
                        0.102395535f : 
                        0.10387013f)) : 
                -0.038499825f) : 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 369, 0, data[11])) ? 
                0.09386124f : 
                0.11969346f)));
    return pred;
  } // constant pool size = 232B, number of visited nodes = 10, static init size = 1152B
  // {00000000 00000000 00000100 00100000 00000000 00000000 00000000 00000000 01000000 00100000 00000000 00000000 00000100 00000000 01001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000010 00000000 01000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00001000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 32, 4, 0, 0, 0, 0, 2, 4, 0, 0, 32, 0, 18, 0, 0, 0, 0, 0, 0, 0, 16, 64, 0, 2, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0, 16, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0};
  // {11111111 11111111 01111111 11111110 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111101 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11101111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 1}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -2, 127, -1, -5, -1, -1, -1, -1, -1, -1, 127, -1, -65, -1, -1, -65, -1, -1, -1, -1, -1, -1, 127, -1, -1, -9, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, 1};
  // {00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 10000000 10000000 00000000 00001000 00000000 00000000 00000000 01010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 10000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 64, 0, 0, 1, 1, 0, 16, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0};
  // {11111111 11111111 11111011 11011111 11111111 11111111 11111111 11111111 10111111 11011111 11111111 11111111 11111011 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -33, -5, -1, -1, -1, -1, -3, -5, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
}


class default_gbm_Forest_39 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_39_class_0.score0(fdata);
  }
}
class default_gbm_Tree_39_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
             (Double.isNaN(data[3]) || data[3 /* sibsp */] <1.5f ? 
                 (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 366, 0, data[11])) ? 
                     (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 366, 0, data[11])) ? 
                        -0.1322094f : 
                        -0.094169974f) : 
                     (Double.isNaN(data[4]) || data[4 /* parch */] <0.5f ? 
                        -0.017151192f : 
                        0.09099265f)) : 
                 (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(366, 0, data[11]) || (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 366, 0, data[11])) ? 
                     (data[6 /* fare */] <24.01543f ? 
                        -0.10259582f : 
                        -0.1134706f) : 
                    -0.10273892f)) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT5, 369, 0, data[11])) ? 
                 (data[2 /* age */] <21.379255f ? 
                    0.1259241f : 
                    -2.1285952E-4f) : 
                0.08796808f)) : 
         (data[6 /* fare */] <9.005787f ? 
             (data[6 /* fare */] <7.684783f ? 
                0.12634018f : 
                 (data[2 /* age */] <30.628906f ? 
                     (data[6 /* fare */] <7.9148154f ? 
                        -0.059210356f : 
                        0.05441099f) : 
                    0.054996442f)) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(365, 4, data[11]) || (GenModel.bitSetIsInRange(365, 4, data[11]) && !GenModel.bitSetContains(GRPSPLIT6, 365, 4, data[11])) ? 
                 (Double.isNaN(data[8 /* embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[8])) ? 
                     (Double.isNaN(data[9]) || data[9 /* boat */] <1.0f ? 
                        -0.120703265f : 
                        0.10314587f) : 
                     (Double.isNaN(data[4]) || data[4 /* parch */] <0.5f ? 
                        0.015943445f : 
                        0.09006389f)) : 
                 (!Double.isNaN(data[9]) ? 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(365, 4, data[11]) || (GenModel.bitSetIsInRange(365, 4, data[11]) && !GenModel.bitSetContains(GRPSPLIT8, 365, 4, data[11])) ? 
                        0.10187252f : 
                        0.10244099f) : 
                    0.10499209f))));
    return pred;
  } // constant pool size = 421B, number of visited nodes = 20, static init size = 2046B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00000000 00000001 10010000 00000000 10000000 00000000 00000000 01000000 01000000 01000000 00000000 00000000 00000000 00000000 00101000 00000010 00000000 00000000 00000010 00000001 00000000 10000000 10000000 00000010 10000001 01001000 10010000 00000000 01000010 00000000 00010001 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00001000 00010000 00000000 00001100 10001000 00001000 00000000 00000000 1}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -128, 9, 0, 1, 0, 0, 2, 2, 2, 0, 0, 0, 0, 20, 64, 0, 0, 64, -128, 0, 1, 1, 64, -127, 18, 9, 0, 66, 0, -120, 0, 0, 16, 0, 0, 0, 0, 16, 8, 0, 48, 17, 16, 0, 0, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000010 00000001 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 1, 0, 0, -128, 0, 0, 0, 0, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 64, -128, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011010 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111101 01011111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -17, -1, -1, -1, -65, -6, -1, -1, -1, 63};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000010 00000000 01000000 00000000 00000000 01000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00001000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, -128, 0, 0, 0, 64, 0, 2, 0, 0, 2, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0};
  // {...4 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111101 11110111 11111111 01111111 11111111 11111111 11111110 11011111 11111111 01111111 00111111 11111101 11111111 01111111 11111111 11111111 11111111 11111111 11101101 01110101 11111111 11011111 11111111 11011111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -65, -17, -1, -2, -1, -1, 127, -5, -1, -2, -4, -65, -1, -2, -1, -1, -1, -1, -73, -82, -1, -5, -1, -5, 31};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {3, 0, 0, 0};
  // {...4 0-bits... 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00010000 01000001 00000000 00000001 00000000 00000000 00100000 00000000 00000000 00000000 10000000 00000000 00000100 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 16, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 8, -126, 0, -128, 0, 0, 4, 0, 0, 0, 1, 0, 32, 0};
}


class default_gbm_Forest_40 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_40_class_0.score0(fdata);
  }
}
class default_gbm_Tree_40_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(186, 0, data[7]) || (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT1, 186, 0, data[7])) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 369, 0, data[11])) ? 
                -0.12698773f : 
                 (Double.isNaN(data[2]) || data[2 /* age */] <32.303406f ? 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(366, 0, data[11]) || (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 366, 0, data[11])) ? 
                        -0.01793446f : 
                        0.118182756f) : 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(366, 0, data[11]) || (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 366, 0, data[11])) ? 
                        -0.1032654f : 
                        -0.09161082f))) : 
             (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(186, 0, data[7]) || (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT5, 186, 0, data[7])) ? 
                 (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(186, 0, data[7]) || (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT6, 186, 0, data[7])) ? 
                    0.10207947f : 
                    0.10275374f) : 
                0.11626334f)) : 
         (data[6 /* fare */] <9.005787f ? 
             (!Double.isNaN(data[8 /* embarked */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[8])) ? 
                 (Double.isNaN(data[2]) || data[2 /* age */] <8.098633f ? 
                    0.03606037f : 
                    -0.088861935f) : 
                 (data[6 /* fare */] <7.696829f ? 
                    0.1601099f : 
                     (Double.isNaN(data[2]) || data[2 /* age */] <21.476562f ? 
                        -0.044114575f : 
                        0.11308288f))) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(365, 4, data[11]) || (GenModel.bitSetIsInRange(365, 4, data[11]) && !GenModel.bitSetContains(GRPSPLIT8, 365, 4, data[11])) ? 
                 (Double.isNaN(data[8 /* embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                     (Double.isNaN(data[9]) || data[9 /* boat */] <1.0f ? 
                        -0.11875822f : 
                        0.10283943f) : 
                     (Double.isNaN(data[4]) || data[4 /* parch */] <0.5f ? 
                        0.014356335f : 
                        0.08250494f)) : 
                 (!Double.isNaN(data[9]) ? 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(365, 4, data[11]) || (GenModel.bitSetIsInRange(365, 4, data[11]) && !GenModel.bitSetContains(GRPSPLIT10, 365, 4, data[11])) ? 
                        0.1016912f : 
                        0.10220346f) : 
                    0.10021506f))));
    return pred;
  } // constant pool size = 402B, number of visited nodes = 19, static init size = 1956B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00000010 00000010 00010100 00100000 00000001 01001110 00000000 00000001 00000000 01000001 00000000 10010000 00000110 00000000 00000010 00100000 01000011 00000101 00010101 11000000 00000000 00000000 00000000 00}
  public static final byte[] GRPSPLIT1 = new byte[] {64, 64, 40, 4, -128, 114, 0, -128, 0, -126, 0, 9, 96, 0, 64, 4, -62, -96, -88, 3, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011010 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11101111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 01111111 11111111 11110111 11111111 11111111 1}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -2, -1, -1, -1, -9, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -65, -2, -1, -17, -1, -1, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00001000 00000010 00000000 00000000 00000000 00000001 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00010001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, -128, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, -120, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63};
  // {00000000 00000000 00000000 00000000 00000001 00000010 00000000 00000000 00000000 01000000 00000000 00010000 00000110 00000000 00000000 00000000 01000001 00000000 00000101 00000000 00000000 00000000 00000000 00}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, -128, 64, 0, 0, 0, 2, 0, 8, 96, 0, 0, 0, -126, 0, -96, 0, 0, 0, 0, 0};
  // {11111111 11111101 11111011 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 01111111 11111111 11111111 11111101 11111111 11111101 11111011 11101111 10111111 11111111 11111111 11111111 11}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -65, -33, -1, -1, -1, -1, -1, -1, 127, -1, -2, -1, -1, -65, -1, -65, -33, -9, -3, -1, -1, -1, 3};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {5, 0, 0, 0};
  // {...4 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111101 11110111 11111111 01111111 11111111 11111111 11111110 11011111 11111111 01111111 00111111 11111101 11111111 01111111 11111111 11111111 11111111 11111111 11101101 01110101 11111111 11011111 11111111 11011111 1}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -65, -17, -1, -2, -1, -1, 127, -5, -1, -2, -4, -65, -1, -2, -1, -1, -1, -1, -73, -82, -1, -5, -1, -5, 31};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {3, 0, 0, 0};
  // {...4 0-bits... 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00010000 01000001 00000000 00000001 00000000 00000000 00100000 00000000 00000000 00000000 10000000 00000000 00000100 0}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 16, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 8, -126, 0, -128, 0, 0, 4, 0, 0, 0, 1, 0, 32, 0};
}


class default_gbm_Forest_41 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_41_class_0.score0(fdata);
  }
}
class default_gbm_Tree_41_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
         (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
            -0.062259786f : 
             (Double.isNaN(data[9]) || data[9 /* boat */] <2.0f ? 
                 (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 366, 0, data[11])) ? 
                     (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 366, 0, data[11])) ? 
                        -0.10474864f : 
                        -0.10319628f) : 
                     (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 366, 0, data[11])) ? 
                        -0.10259615f : 
                        -0.10212341f)) : 
                0.102831304f)) : 
         (Double.isNaN(data[3]) || data[3 /* sibsp */] <1.5f ? 
             (!Double.isNaN(data[10]) ? 
                 (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(365, 4, data[11]) || (GenModel.bitSetIsInRange(365, 4, data[11]) && !GenModel.bitSetContains(GRPSPLIT5, 365, 4, data[11])) ? 
                     (data[5 /* ticket */] <340292.5f ? 
                        -0.12976982f : 
                        -0.10713663f) : 
                    -0.10254104f) : 
                0.029144835f) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(365, 4, data[11]) || (GenModel.bitSetIsInRange(365, 4, data[11]) && !GenModel.bitSetContains(GRPSPLIT6, 365, 4, data[11])) ? 
                 (Double.isNaN(data[5]) || data[5 /* ticket */] <25441.5f ? 
                    -0.12209372f : 
                     (Double.isNaN(data[6]) || data[6 /* fare */] <25.78711f ? 
                        -0.08300619f : 
                        -0.107199855f)) : 
                0.1068359f)));
    return pred;
  } // constant pool size = 383B, number of visited nodes = 13, static init size = 1986B
  // {00001000 00000001 11010100 10100011 10110000 01100101 10010000 01000010 01100010 01110001 00000000 10011100 01100100 00010101 01101010 01100011 00000000 01000010 10000110 00110001 01110001 10000001 10001000 00001111 10000011 11011010 11010100 00010000 01100101 10001011 10010011 00000011 00110001 10001000 10000010 01010000 00011010 10000000 00011010 00010100 00000000 01001100 10001100 00011000 10000000 01001011 1}
  public static final byte[] GRPSPLIT0 = new byte[] {16, -128, 43, -59, 13, -90, 9, 66, 70, -114, 0, 57, 38, -88, 86, -58, 0, 66, 97, -116, -114, -127, 17, -16, -63, 91, 43, 8, -90, -47, -55, -64, -116, 17, 65, 10, 88, 1, 88, 40, 0, 50, 49, 24, 1, -46, 1};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10101111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 01011111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -65, -6, -1, -1, -1, -1, 1};
  // {11111111 11111111 11111101 11111111 11111101 11111111 11111111 01111111 11101010 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11011111 11111111 10010011 11011111 11111111 11111011 11101101 11111111 11110111 11111111 11111111 11111011 11011111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -65, -1, -65, -1, -1, -2, 87, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -5, -1, -55, -5, -1, -33, -73, -1, -17, -1, -1, -33, -5, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, 63};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111011 11101101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -33, -73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63};
  // {11101011 11010111 11111111 11111111 10111011 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11110111 11110111 11111111 01111111 11111111 11110111 11101111 10111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111011 11111111 11111111 11101110 11111111 11111111 11111101 11111111 01111110 10001111 11111101 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT4 = new byte[] {-41, -21, -1, -1, -35, -1, 127, -1, -1, -1, -1, -1, -1, -2, -1, -1, -17, -17, -1, -2, -1, -17, -9, -3, -1, -1, 127, -1, -1, -1, -1, -33, -1, -1, 119, -1, -1, -65, -1, 126, -15, -65, -1, -1, -1, 63};
  // {...4 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31};
  // {...4 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31};
}


class default_gbm_Forest_42 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_42_class_0.score0(fdata);
  }
}
class default_gbm_Tree_42_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[5 /* ticket */] <3707.5f ? 
         (Double.isNaN(data[6]) || data[6 /* fare */] <15.0096445f ? 
             (Double.isNaN(data[6]) || data[6 /* fare */] <8.614021f ? 
                 (data[5 /* ticket */] <2647.5f ? 
                    -0.06032359f : 
                    0.0038740768f) : 
                -0.06395278f) : 
             (Double.isNaN(data[2]) || data[2 /* age */] <0.5408861f ? 
                0.14620343f : 
                0.08525755f)) : 
         (data[5 /* ticket */] <9757.5f ? 
            -0.08811358f : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
                 (!Double.isNaN(data[9]) ? 
                     (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
                        -0.06701756f : 
                        0.101990476f) : 
                    -0.028275805f) : 
                 (data[2 /* age */] <29.55664f ? 
                    0.111569256f : 
                    0.099523574f))));
    return pred;
  } // constant pool size = 136B, number of visited nodes = 10, static init size = 576B
  // {00000000 00000000 00000100 00100000 00000000 00000000 00000000 00000000 01000000 00100000 00000000 00000000 00000100 00000000 01001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000010 00000000 01000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00001000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 32, 4, 0, 0, 0, 0, 2, 4, 0, 0, 32, 0, 18, 0, 0, 0, 0, 0, 0, 0, 16, 64, 0, 2, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0, 16, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 10111111 11111111 11101111 11011111 11111110 11111111 11111111 11111111 01111111 10111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -3, -1, -9, -5, 127, -1, -1, -1, -2, -3, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, 1};
}


class default_gbm_Forest_43 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_43_class_0.score0(fdata);
  }
}
class default_gbm_Tree_43_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(186, 0, data[7]) || (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT1, 186, 0, data[7])) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 369, 0, data[11])) ? 
                -0.12232066f : 
                 (Double.isNaN(data[8 /* embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[8])) ? 
                     (Double.isNaN(data[9]) || data[9 /* boat */] <1.0f ? 
                        -0.041838136f : 
                        0.10229918f) : 
                     (Double.isNaN(data[5]) || data[5 /* ticket */] <339809.5f ? 
                        -0.11204373f : 
                        0.120778814f))) : 
             (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(186, 0, data[7]) || (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT4, 186, 0, data[7])) ? 
                 (data[2 /* age */] <35.551125f ? 
                    0.11132412f : 
                    0.011255994f) : 
                0.11478298f)) : 
         (data[6 /* fare */] <9.005787f ? 
             (!Double.isNaN(data[8 /* embarked */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[8])) ? 
                 (Double.isNaN(data[2]) || data[2 /* age */] <8.098633f ? 
                    0.03196455f : 
                    -0.08461726f) : 
                 (data[6 /* fare */] <7.696829f ? 
                    0.14629422f : 
                     (Double.isNaN(data[2]) || data[2 /* age */] <21.476562f ? 
                        -0.04612276f : 
                        0.09767954f))) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(365, 4, data[11]) || (GenModel.bitSetIsInRange(365, 4, data[11]) && !GenModel.bitSetContains(GRPSPLIT6, 365, 4, data[11])) ? 
                 (Double.isNaN(data[8 /* embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[8])) ? 
                     (Double.isNaN(data[9]) || data[9 /* boat */] <1.0f ? 
                        -0.11595218f : 
                        0.10220391f) : 
                     (Double.isNaN(data[4]) || data[4 /* parch */] <0.5f ? 
                        0.01759639f : 
                        0.07216533f)) : 
                 (!Double.isNaN(data[9]) ? 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(365, 4, data[11]) || (GenModel.bitSetIsInRange(365, 4, data[11]) && !GenModel.bitSetContains(GRPSPLIT8, 365, 4, data[11])) ? 
                        0.10136705f : 
                        0.10180025f) : 
                    0.0948986f))));
    return pred;
  } // constant pool size = 288B, number of visited nodes = 19, static init size = 1272B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00000010 00000010 00010100 00100000 00000001 01001110 00000000 00000001 00000000 01000001 00000000 10010000 00000110 00000000 00000010 00100000 01000011 00000101 00010101 11000000 00000000 00000000 00001000 00}
  public static final byte[] GRPSPLIT1 = new byte[] {64, 64, 40, 4, -128, 114, 0, -128, 0, -126, 0, 9, 96, 0, 64, 4, -62, -96, -88, 3, 0, 0, 16, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11101111 11111111 11111111 11110101 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 01111111 11111111 11110111 11111111 11111111 1}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -2, -1, -1, -1, -9, -1, -1, -81, -5, -1, -1, -1, -1, -1, -1, -1, -65, -2, -1, -17, -1, -1, 1};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000001 00000010 00000000 00000000 00000000 01000000 00000000 00010000 00000110 00000000 00000000 00000000 01000001 00000000 00000101 00000000 00000000 00000000 00000000 00}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, -128, 64, 0, 0, 0, 2, 0, 8, 96, 0, 0, 0, -126, 0, -96, 0, 0, 0, 0, 0};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {5, 0, 0, 0};
  // {...4 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111101 11110111 11111111 01111111 11111111 11111111 11111110 11011111 11111111 01111111 00111111 11111101 11111111 01111111 11111111 11111111 11111111 11111111 11101101 01110101 11111111 11011111 11111111 11011111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -65, -17, -1, -2, -1, -1, 127, -5, -1, -2, -4, -65, -1, -2, -1, -1, -1, -1, -73, -82, -1, -5, -1, -5, 31};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {3, 0, 0, 0};
  // {...4 0-bits... 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 01000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 16, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0};
}


class default_gbm_Forest_44 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_44_class_0.score0(fdata);
  }
}
class default_gbm_Tree_44_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
         (data[9 /* boat */] <11.5f ? 
            0.10153914f : 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 366, 0, data[11])) ? 
                -0.07770897f : 
                 (Double.isNaN(data[3]) || data[3 /* sibsp */] <2.5f ? 
                     (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 366, 0, data[11])) ? 
                        -0.12249971f : 
                        -0.09489878f) : 
                    0.019239824f))) : 
         (Double.isNaN(data[3]) || data[3 /* sibsp */] <1.5f ? 
             (!Double.isNaN(data[10]) ? 
                 (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(354, 15, data[11]) || (GenModel.bitSetIsInRange(354, 15, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 354, 15, data[11])) ? 
                     (data[6 /* fare */] <8.005144f ? 
                        -0.10456968f : 
                        -0.12317656f) : 
                    -0.10219404f) : 
                0.027489455f) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(354, 15, data[11]) || (GenModel.bitSetIsInRange(354, 15, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 354, 15, data[11])) ? 
                 (Double.isNaN(data[5]) || data[5 /* ticket */] <25441.5f ? 
                    -0.118656404f : 
                     (Double.isNaN(data[6]) || data[6 /* fare */] <25.78711f ? 
                        -0.08183912f : 
                        -0.10654158f)) : 
                0.10560727f)));
    return pred;
  } // constant pool size = 282B, number of visited nodes = 12, static init size = 1404B
  // {00000000 00000001 11010100 10100010 10110000 01000101 10010000 01000000 01100010 01110001 00000000 10011000 01100100 00010101 01101010 01100011 00000000 01000010 10000110 00110001 01100001 10000001 10001000 00001111 10000011 11011010 11010100 00010000 01100001 10001011 10010011 00000011 00100001 10001000 10000010 01010000 00001000 10000000 00011000 00010100 00000000 01001100 10001100 00001000 10000000 01001011 1}
  public static final byte[] GRPSPLIT0 = new byte[] {0, -128, 43, 69, 13, -94, 9, 2, 70, -114, 0, 25, 38, -88, 86, -58, 0, 66, 97, -116, -122, -127, 17, -16, -63, 91, 43, 8, -122, -47, -55, -64, -124, 17, 65, 10, 16, 1, 24, 40, 0, 50, 49, 16, 1, -46, 1};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10101111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 01011111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -11, -1, -1, -1, -1, -1, -1, -9, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -65, -6, -1, -1, -1, 63};
  // {11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111101 11111111 11111111 11111111 11111011 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111011 11111101 11111111 11111111 11111111 11101111 11111111 11111111 11111111 11111101 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -1, -1, -5, -1, -65, -1, -1, -1, -33, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -33, -65, -1, -1, -1, -9, -1, -1, -1, -65, -1, -65, -1, -1, -1, -1, -1, -1, 63};
  // {...15 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
  // {...15 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
}


class default_gbm_Forest_45 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_45_class_0.score0(fdata);
  }
}
class default_gbm_Tree_45_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[5 /* ticket */] <3707.5f ? 
         (Double.isNaN(data[6]) || data[6 /* fare */] <15.0096445f ? 
             (Double.isNaN(data[6]) || data[6 /* fare */] <8.614021f ? 
                 (Double.isNaN(data[5]) || data[5 /* ticket */] <2682.5f ? 
                    -0.043913167f : 
                    0.018901162f) : 
                -0.05918502f) : 
             (Double.isNaN(data[2]) || data[2 /* age */] <7.992054f ? 
                0.13360332f : 
                0.04552767f)) : 
         (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
             (!Double.isNaN(data[9]) ? 
                 (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
                    -0.06342741f : 
                     (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 369, 0, data[11])) ? 
                        0.10136651f : 
                        0.10194004f)) : 
                -0.028794307f) : 
            0.11381857f));
    return pred;
  } // constant pool size = 180B, number of visited nodes = 9, static init size = 864B
  // {00000000 00000000 00000100 00100000 00000000 00000000 00000000 00000000 01000000 00100000 00000000 00000000 00000000 00000000 01001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000010 00000000 01000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 32, 4, 0, 0, 0, 0, 2, 4, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 16, 64, 0, 2, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111011 11011110 11111111 11111111 10111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11011101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111100 1}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, 123, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, 63, 1};
  // {00000000 00000001 00010000 00000000 10000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 10000000 10000000 00000100 00001000 00000000 10000000 00000000 01010000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000100 10000000 00000000 00000000 00000000 1}
  public static final byte[] GRPSPLIT2 = new byte[] {0, -128, 8, 0, 1, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 1, 1, 32, 16, 0, 1, 0, 10, 0, 0, 64, 0, 0, 0, 0, 0, 0, 16, 0, 0, 32, 1, 0, 0, 0, 1};
}


class default_gbm_Forest_46 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_46_class_0.score0(fdata);
  }
}
class default_gbm_Tree_46_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (data[5 /* ticket */] <370089.5f ? 
             (Double.isNaN(data[5]) || data[5 /* ticket */] <364317.5f ? 
                 (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(366, 3, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 366, 3, data[11])) ? 
                    -0.124120034f : 
                     (Double.isNaN(data[4]) || data[4 /* parch */] <0.5f ? 
                        -0.02977466f : 
                        0.053313192f)) : 
                0.2877065f) : 
             (Double.isNaN(data[2]) || data[2 /* age */] <8.464873f ? 
                 (!Double.isNaN(data[8 /* embarked */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                    -0.10890637f : 
                    -0.10240018f) : 
                 (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(362, 0, data[11]) || (GenModel.bitSetIsInRange(362, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 362, 0, data[11])) ? 
                     (Double.isNaN(data[9]) || data[9 /* boat */] <1.5f ? 
                        -0.088880286f : 
                        0.10154213f) : 
                    0.116386935f))) : 
         (data[6 /* fare */] <8.005144f ? 
             (Double.isNaN(data[8 /* embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                 (Double.isNaN(data[2]) || data[2 /* age */] <8.098633f ? 
                    0.03929421f : 
                    -0.082219295f) : 
                 (data[6 /* fare */] <7.7001414f ? 
                    0.134412f : 
                    0.0345518f)) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(365, 4, data[11]) || (GenModel.bitSetIsInRange(365, 4, data[11]) && !GenModel.bitSetContains(GRPSPLIT5, 365, 4, data[11])) ? 
                 (Double.isNaN(data[8 /* embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                     (Double.isNaN(data[2]) || data[2 /* age */] <30.144531f ? 
                        -0.08010251f : 
                        0.11418563f) : 
                     (Double.isNaN(data[3]) || data[3 /* sibsp */] <0.5f ? 
                        0.008695204f : 
                        0.04868742f)) : 
                 (!Double.isNaN(data[9]) ? 
                     (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(365, 4, data[11]) || (GenModel.bitSetIsInRange(365, 4, data[11]) && !GenModel.bitSetContains(GRPSPLIT7, 365, 4, data[11])) ? 
                        0.10108634f : 
                        0.101386584f) : 
                    0.09061214f))));
    return pred;
  } // constant pool size = 284B, number of visited nodes = 19, static init size = 1248B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {...3 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11110111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 10111111 11111111 11111111 11111111 11111111 10111111 11111111 11111111 11111110 11101011 11111111 11111111 11111111 11111101 111}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -17, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -3, -1, -1, 127, -41, -1, -1, -1, -65, 63};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {5, 0, 0, 0};
  // {00000000 00000001 00000000 00000000 00000000 00000000 10000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 01101000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 01000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -128, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 16, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {5, 0, 0, 0};
  // {...4 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111101 11110111 11111111 01111111 11111111 11111111 11111110 11011111 11111111 01111111 00111111 11111101 11111111 01111111 11111111 11111111 11111111 11111111 11101101 01110101 11111111 11011111 11111111 11011111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -65, -17, -1, -2, -1, -1, 127, -5, -1, -2, -4, -65, -1, -2, -1, -1, -1, -1, -73, -82, -1, -5, -1, -5, 31};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {3, 0, 0, 0};
  // {...4 0-bits... 00000000 00001000 00000000 00010000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 01000001 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 16, 0, 8, 0, 0, 0, 4, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, -126, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0};
}


class default_gbm_Forest_47 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_47_class_0.score0(fdata);
  }
}
class default_gbm_Tree_47_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
         (data[5 /* ticket */] <6735.5f ? 
            -0.08226739f : 
             (data[9 /* boat */] <11.5f ? 
                 (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 366, 0, data[11])) ? 
                    0.1009803f : 
                    0.101427816f) : 
                 (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(366, 0, data[11]) || (GenModel.bitSetIsInRange(366, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 366, 0, data[11])) ? 
                     (Double.isNaN(data[3]) || data[3 /* sibsp */] <2.5f ? 
                        -0.09951469f : 
                        0.01915576f) : 
                    0.050565213f))) : 
         (Double.isNaN(data[3]) || data[3 /* sibsp */] <1.5f ? 
             (!Double.isNaN(data[10]) ? 
                 (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(354, 15, data[11]) || (GenModel.bitSetIsInRange(354, 15, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 354, 15, data[11])) ? 
                     (data[6 /* fare */] <8.005144f ? 
                        -0.103806145f : 
                        -0.1210845f) : 
                    -0.101832345f) : 
                0.025332812f) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(354, 15, data[11]) || (GenModel.bitSetIsInRange(354, 15, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 354, 15, data[11])) ? 
                 (Double.isNaN(data[5]) || data[5 /* ticket */] <25441.5f ? 
                    -0.117335215f : 
                     (Double.isNaN(data[6]) || data[6 /* fare */] <25.78711f ? 
                        -0.08146189f : 
                        -0.105183326f)) : 
                0.104343474f)));
    return pred;
  } // constant pool size = 286B, number of visited nodes = 13, static init size = 1404B
  // {00000000 00000001 11010100 10100010 10110000 01000101 10010000 01000000 01100010 01110001 00000000 10011000 01100100 00010101 00101010 01100011 00000000 01000010 10000110 00110001 01100001 10000001 10001000 00001111 10000011 11011010 11010100 00010000 01100001 10001011 10010011 00000011 00100000 10001000 10000010 01010000 00001000 10000000 00011000 00010100 00000000 01001100 10001100 00001000 10000000 01001011 1}
  public static final byte[] GRPSPLIT0 = new byte[] {0, -128, 43, 69, 13, -94, 9, 2, 70, -114, 0, 25, 38, -88, 84, -58, 0, 66, 97, -116, -122, -127, 17, -16, -63, 91, 43, 8, -122, -47, -55, -64, 4, 17, 65, 10, 16, 1, 24, 40, 0, 50, 49, 16, 1, -46, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000100 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000001 00000100 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00010000 00000000 000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 32, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, -128, 32, 0, 0, 0, 0, 64, 0, 0, 0, 0, 8, 0, 0};
  // {00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {...15 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
  // {...15 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
}


class default_gbm_Forest_48 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_48_class_0.score0(fdata);
  }
}
class default_gbm_Tree_48_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[5 /* ticket */] <3707.5f ? 
         (Double.isNaN(data[6]) || data[6 /* fare */] <15.0096445f ? 
             (Double.isNaN(data[6]) || data[6 /* fare */] <8.614021f ? 
                 (Double.isNaN(data[5]) || data[5 /* ticket */] <2682.5f ? 
                    -0.045094606f : 
                    0.021195488f) : 
                -0.056673955f) : 
             (Double.isNaN(data[2]) || data[2 /* age */] <7.992054f ? 
                0.12137673f : 
                0.041161966f)) : 
         (data[6 /* fare */] <8.005144f ? 
             (Double.isNaN(data[5]) || data[5 /* ticket */] <367081.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* age */] <20.328125f ? 
                     (data[5 /* ticket */] <340113.0f ? 
                        0.034040872f : 
                        -0.1128379f) : 
                     (Double.isNaN(data[6]) || data[6 /* fare */] <7.801172f ? 
                        0.15512049f : 
                        -0.0481475f)) : 
                 (Double.isNaN(data[2]) || data[2 /* age */] <15.40625f ? 
                    0.13964842f : 
                    0.008436942f)) : 
             (!Double.isNaN(data[9]) ? 
                 (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT0, 369, 0, data[11])) ? 
                    -0.061613187f : 
                     (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT1, 369, 0, data[11])) ? 
                        0.10113139f : 
                        0.101791866f)) : 
                -0.054858357f)));
    return pred;
  } // constant pool size = 152B, number of visited nodes = 14, static init size = 576B
  // {11110111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111011 11111111 11111111 11111111 11111011 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-17, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -33, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
  // {00000000 00000001 00010000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 10000000 00000000 00000000 00001001 00000000 00000000 00000000 01010000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 10000000 00000000 00000000 00000000 1}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -128, 8, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 1, 0, 0, -112, 0, 0, 0, 10, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 1};
}


class default_gbm_Forest_49 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += default_gbm_Tree_49_class_0.score0(fdata);
  }
}
class default_gbm_Tree_49_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7 /* cabin */]) || !GenModel.bitSetIsInRange(186, 0, data[7]) || (GenModel.bitSetIsInRange(186, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT0, 186, 0, data[7])) ? 
         (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[11 /* home.dest */]) && (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT2, 369, 0, data[11])) ? 
                -0.1146306f : 
                 (Double.isNaN(data[8 /* embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[8])) ? 
                     (!Double.isNaN(data[9]) ? 
                        0.101642825f : 
                        -0.03644591f) : 
                     (Double.isNaN(data[5]) || data[5 /* ticket */] <339809.5f ? 
                        -0.111203015f : 
                        0.095736794f))) : 
             (Double.isNaN(data[11 /* home.dest */]) || !GenModel.bitSetIsInRange(369, 0, data[11]) || (GenModel.bitSetIsInRange(369, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT4, 369, 0, data[11])) ? 
                 (data[6 /* fare */] <8.005144f ? 
                     (Double.isNaN(data[8 /* embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[8])) ? 
                        -0.0015752595f : 
                        0.08669337f) : 
                     (!Double.isNaN(data[9]) ? 
                        0.101150095f : 
                        -0.0189537f)) : 
                0.11430301f)) : 
        0.08334407f);
    return pred;
  } // constant pool size = 174B, number of visited nodes = 10, static init size = 816B
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 01000000 00000000 00010000 00000100 01000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 01001000 00}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 0, 0, 64, 0, 0, 0, 2, 0, 8, 32, 2, 0, 0, 0, 0, -128, 0, 0, 0, 18, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 10101111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 01111111 11111111 11110111 11111111 11111111 1}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -5, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -5, -1, -11, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -2, -1, -17, -1, -1, 1};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00100101 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00001000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0, 16, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {5, 0, 0, 0};
}


